/*
  ReviewBot 0.1
  Copyright (c) Microsoft Corporation
  All rights reserved. 
  
  MIT License
  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.Research.CodeAnalysis;
using System.Diagnostics.Contracts;

namespace Microsoft.Research.ReviewBot
{
  using System.Diagnostics.Contracts;
  using Microsoft.Research.ReviewBot.Annotations;
  using Microsoft.Research.ReviewBot.Utils;
  internal static class HelperForDiagnostics
  {
    /// <summary>
    /// Prints all the diagnostics generated by the compilation
    /// </summary>
    /// <param name="compilation"></param>
    internal static void PrintDiagnostics(IEnumerable<Diagnostic> diagnostics)
    {
      #region CodeContracts
      Contract.Requires(diagnostics != null);
      #endregion CodeContracts

      var errors = diagnostics.Where(diagnostic => diagnostic.Severity == DiagnosticSeverity.Error);
      //errors = errors.Where(error => error.Id != "CS7027");
      RBLogger.Indent();
      foreach (var d in errors.Where(error => error.Location.SourceTree == null))
      {
        RBLogger.Info(d);
      }
      RBLogger.Unindent();
      errors = errors.Where(error => error.Location.SourceTree != null);
      foreach(var filegroup in errors.GroupBy(error => error.Location.SourceTree.FilePath)) 
      {
        var first = filegroup.First();
        RBLogger.Info(first.Location.SourceTree.FilePath);
        RBLogger.Indent();
        foreach (var d in filegroup) 
        {
          RBLogger.Info(d);
        }
        RBLogger.Unindent();
      }
    }
    /// <summary>
    /// Get the compilation's errors (ignore warnings, info)
    /// </summary>
    /// <param name="compilation">The compilation you want to get the errors for</param>
    /// <returns></returns>
    //internal static Dictionary<SyntaxTree, List<Diagnostic>> GetDiagnostics(Compilation compilation)
    //{
    //  #region CodeContracts
    //  Contract.Requires(compilation != null);
    //  Contract.Ensures(Contract.Result<Dictionary<SyntaxTree, List<Diagnostic>>>() != null);
    //  #endregion CodeContracts

    //  Contract.Assume(compilation.SyntaxTrees != null);
    //  var diags = new Dictionary<SyntaxTree, List<Diagnostic>>();
    //  foreach (var st in compilation.SyntaxTrees)
    //  {
    //    //Debug.WriteLine(st.FilePath);
    //    //RBLogger.Info(st.FilePath);
    //    var sm = compilation.GetSemanticModel(st);
    //    var ds = sm.GetDiagnostics();
    //    foreach (var d in ds)
    //    {
    //      if (d.Severity == DiagnosticSeverity.Error)
    //      {
    //        List<Diagnostic> oldDiagnostics;
    //        if (diags.TryGetValue(st, out oldDiagnostics))
    //        {
    //          Contract.Assume(oldDiagnostics != null); // this is the semantics of dictionary.TryGetValue right?
    //          oldDiagnostics.Add(d); 
    //        }
    //        else 
    //        {
    //          diags.Add(st, new List<Diagnostic>());
    //          diags[st].Add(d);
    //        }
    //      }
    //    }
    //  }
    //  return diags;
    //}
    /// <summary>
    /// Remove the annotations from orig_suggestions that cause diagnostics
    /// </summary>
    /// <param name="compilation"></param>
    /// <param name="origcomp"></param>
    /// <param name="orig_suggestions"></param>
    /// <returns></returns>
    //internal static IEnumerable<BaseAnnotation> FilterBadSuggestions(Compilation newcomp, Compilation origcomp, IEnumerable<BaseAnnotation> orig_suggestions)
    internal static IEnumerable<BaseAnnotation> FilterBadSuggestions(Compilation compilation, IEnumerable<BaseAnnotation> orig_suggestions)
    {
      #region CodeContracts
      Contract.Requires(compilation != null);
      Contract.Requires(orig_suggestions != null);
      Contract.Requires(Contract.ForAll(orig_suggestions, suggestion => suggestion != null));
      Contract.Requires(Contract.ForAll(orig_suggestions, suggestion => suggestion.MethodName != null));
      Contract.Requires(Contract.ForAll(orig_suggestions, suggestion => suggestion.FileName != null));
      #endregion CodeContracts

      var badSuggestions = new List<BaseAnnotation>();

      //foreach (var pair in origcomp.SyntaxTrees.Zip(newcomp.SyntaxTrees, (SyntaxTree a, SyntaxTree b) => Tuple.Create(a,b)))
      foreach (var syntaxTree in compilation.SyntaxTrees)
      {
        var sm = compilation.GetSemanticModel(syntaxTree);
        var diags = sm.GetDiagnostics();
        if (diags.Any())
        {
          var errors = new List<Diagnostic>();
          foreach (var d in diags)
          {
            if (d.Severity == DiagnosticSeverity.Error)
            {
              errors.Add(d);
            }
          }
          if (errors.Any())
          {
            RBLogger.Info("Found the following errors in " + syntaxTree.FilePath + ":");
            RBLogger.Indent();
            foreach (var e in errors)
            {
              RBLogger.Info(e.ToString().Replace(syntaxTree.FilePath, ""));
            }
            RBLogger.Unindent();
            var thistreessugs = orig_suggestions.Where(x => x.FileName.Equals(syntaxTree.FilePath, StringComparison.OrdinalIgnoreCase));
            //Dictionary<MethodNameId, List<BaseAnnotation>> thistreessugs;
            //if (orig_suggestions.TryGetValue(oldst.FilePath, out thistreessugs))
            var dr = new DiagnosticFinder(errors, sm, thistreessugs);
            dr.Visit(syntaxTree.GetRoot());
            //var bad2 = dr.sugs.Where(x => x.isBad);
            badSuggestions.AddRange(dr.BadSuggestions);
            RBLogger.ErrorIf(dr.BadSuggestions.Count() != errors.Count(), "Failed to find some bad suggestions in {0}", syntaxTree.FilePath);
            //Console.WriteLine("bad suggestions:");
            //foreach (var b in bad2) { Console.WriteLine(b); }
            //if (oldst.FilePath.Contains("RuleBuilder")) { Debugger.Break(); }
          }
        }
      }
      //return FilterDictionary(orig_suggestions);
      //var good = orig_suggestions.Where(x => !x.isBad);
      //var bad = orig_suggestions.Where(x => x.isBad);
      var bad = badSuggestions;
      var good = orig_suggestions.Except(bad, new AnnotationEqualitiyComparer());
      //RBLogger.Info("Suggestions that caused errors: {0}", bad.Count());
      //RBLogger.Indent();
      //RBLogger.Info("bad count: {0}", bad.Count());
      //RBLogger.Info("good count: {0}", good.Count());
      //RBLogger.Info("orig count: {0}", orig_suggestions.Count());
      //foreach (var b in bad) 
      //{
      //  RBLogger.Info(b);
      //}
      //RBLogger.Unindent();
      //var not_found = bad.Except(good, new AnnotationEqualitiyComparer());
      //RBLogger.Info("unfound bad suggestions count: {0}", not_found.Count());
      //RBLogger.Info("unfound bad suggestions:");
      //foreach (var nf in not_found) { RBLogger.Info(nf); }
      //var goodinv = good.OfType<ObjectInvariant>();
      //RBLogger.Indent();
      //RBLogger.Info("Good object invariants: {0}", goodinv.Count());
      //foreach (var b in goodinv) 
      //{
      //  RBLogger.Info(b);
      //  if (b.FileName.Contains("RuleBuilder")) { int x; }
      //}
      //RBLogger.Unindent();
      //RBLogger.Indent();
      //RBLogger.Info("Good suggestions: {0}", good.Count());
      //foreach (var b in good) 
      //{
      //  RBLogger.Info(b);
      //}
      //RBLogger.Unindent();
      return good;
    }
    private class AnnotationEqualitiyComparer : EqualityComparer<BaseAnnotation>
    {

      public override bool Equals(BaseAnnotation x, BaseAnnotation y)
      {
        #region CodeContracts
        Contract.Assume(x != null);
        Contract.Assume(y != null);
        #endregion CodeContracts

        if (x is ResolvedInterfaceAnnotation)
        {
          return Equals((x as ResolvedInterfaceAnnotation).OriginalAnnotation, y);
        }
        if (y is ResolvedInterfaceAnnotation)
        {
          return Equals((y as ResolvedInterfaceAnnotation).OriginalAnnotation, x);
        }
        if (x is ResolvedObjectInvariant)
        {
          return Equals((x as ResolvedObjectInvariant).OriginalAnnotation, y);
        }
        if (y is ResolvedObjectInvariant)
        {
          return Equals((y as ResolvedObjectInvariant).OriginalAnnotation, x);
        }
        if (x.Kind != y.Kind) { return false; }
        if (x.Annotation != y.Annotation) { return false; }
        if (x.Squiggle != y.Squiggle) { return false; }
        if (x.MethodName != y.MethodName) { return false; }
        if (x.FileName != y.FileName) { return false; }
        return true;
      }

      public override int GetHashCode(BaseAnnotation obj)
      {
        Contract.Assume(obj != null);
        return obj.Kind.GetHashCode() + obj.MethodName.GetHashCode() + obj.Annotation.GetHashCode() + obj.FileName.GetHashCode();
      }
    }
    private class DiagnosticFinder : CSharpSyntaxWalker
    {
      private readonly List<Diagnostic> Diagnostics;
      private readonly SemanticModel SematicModel;
      public readonly IEnumerable<BaseAnnotation> Suggestions;
      public readonly List<BaseAnnotation> BadSuggestions;
      public DiagnosticFinder(List<Diagnostic> diagnostics, SemanticModel semanticmodel, IEnumerable<BaseAnnotation> suggestions)
      {
        #region CodeContracts
        Contract.Requires(diagnostics != null);
        Contract.Requires(semanticmodel != null);
        Contract.Requires(suggestions != null);
        Contract.Ensures(Diagnostics == diagnostics);
        Contract.Ensures(SematicModel == semanticmodel);
        Contract.Ensures(Suggestions == suggestions);
        Contract.Ensures(BadSuggestions != null);
        #endregion CodeContracts

        this.Diagnostics = diagnostics;
        this.SematicModel = semanticmodel;
        this.Suggestions = suggestions;
        this.BadSuggestions = new List<BaseAnnotation>();
      }
      public override void VisitMethodDeclaration(MethodDeclarationSyntax orig)
      {
        VisitAnyBody(orig, orig.Body);
      }
      public override void VisitConstructorDeclaration(ConstructorDeclarationSyntax orig)
      {
        VisitAnyBody(orig, orig.Body);
      }
      public override void VisitAccessorDeclaration(AccessorDeclarationSyntax orig)
      {
        VisitAnyBody(orig, orig.Body);
        base.VisitAccessorDeclaration(orig);
      }
      private void VisitAnyBody(SyntaxNode original, BlockSyntax body)
      {
        /* This method is necessary because even though MethodDeclaration,
         * ConstructorDeclaration, and AccessorDeclaration all have the field
         * Body, they don't share any common base class with the field body
         */
        if (body != null)
        {
          foreach (var d in Diagnostics)
          {
            if (DoesMethodIntersectWithDiagnostic(original, d))
            {
              foreach (var stmt in body.Statements)
              {
                if (DoesStatementIntersectWithDiagnostic(stmt, d)
                     && stmt.CSharpKind() == SyntaxKind.ExpressionStatement)
                {
                  TryMarkSuggestion(original, stmt);
                }
              }
            }
          }
        }
      }
      private bool DoesMethodIntersectWithDiagnostic(SyntaxNode meth, Diagnostic diag)
      {
        return meth.Span.IntersectsWith(diag.Location.SourceSpan);
      }
      private bool DoesStatementIntersectWithDiagnostic(StatementSyntax stmt, Diagnostic diag)
      {
        return stmt.Span.IntersectsWith(diag.Location.SourceSpan);
      }
      private void TryMarkSuggestion(SyntaxNode containingmethod, StatementSyntax statementundertest)
      {
        Contract.Requires(statementundertest != null);

        var si = SematicModel.GetDeclaredSymbol(containingmethod) as ISymbol;
        Contract.Assert(si != null);
        var dci = si.GetDocumentationCommentId();
        //if (dci.Equals(methodname))
        foreach (var ann in Suggestions.Where(x => x.MethodName.Equals(dci) && x.Kind != ClousotSuggestion.Kind.ReadonlyField))
        {
          /* the above conditional can lead to false positives
           * You could theoretically have another method called ...ObjectInvariantMethod
           * and have Contract.Invariants in it, and have the exact invariant that also generated this
           * error and we would errorneously delete your invariant too
           * but that seems a pretty extreme edge case.
          */
          // this web of ifs could be refactored
          // I'm trying to avoid checking every statement against every suggestion
          //foreach(var precon in sugs[methodname])
          //{
          //if (ann.Annotation.Equals(statementundertest.GetText().ToString().Replace(ReviewBot.signature, "")))
          //if (ann.Annotation.Equals(statementundertest.GetText().ToString()))
          if (statementundertest.GetText().ToString().Contains(ann.Annotation.Replace(Constants.String.Signature, "")))
          //if (statementundertest.GetText().ToString().Contains(ann.Annotation))
          {
            //sugs[methodname].Remove(precon);
            //if (ann.Kind == ClousotSuggestion.Kind.ObjectInvariant) { Debugger.Break(); }
            //RBLogger.Info("Marking bad: {0}", ann);
            //ann.isBad = true;
            BadSuggestions.Add(ann);
            return;
          }
          //}
        }
        var isObjectInvariant = containingmethod is MethodDeclarationSyntax &&
          ObjectInvariantHelpers.isObjectInvariantMethod((MethodDeclarationSyntax) containingmethod, SematicModel);
        if (isObjectInvariant)
        {
          foreach (var ann in Suggestions.Where(x => x.Kind == ClousotSuggestion.Kind.ObjectInvariant))
          {
            if (ann.Annotation.Equals(statementundertest.GetText().ToString().TrimEnd('\r', '\n')))
            {
              //ann.isBad = true;
              BadSuggestions.Add(ann);
            }
          }
          //foreach (var precons in sugs.Values)
          //{
          //  foreach (var precon in precons)
          //  {
          //    if (precon.Annotation.Equals(statementundertest.GetText().ToString().TrimEnd('\r', '\n')))
          //    {
          //      precon.isBad = true;
          //    }
          //  }
          //}
        }
      }
    }
  }
}
