<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.CodeAnalysis.EditorFeatures</name>
    </assembly>
    <members>
        <member name="T:Microsoft.CodeAnalysis.Editor.CommandArgs">
            <summary>
            The base class of all command argument types used by ICommandHandler.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.CommandArgs.SubjectBuffer">
            <summary>
            The text buffer of where the caret is when the command happens.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.CommandArgs.TextView">
            <summary>
            The text view that originated this command.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.CommandHandlers.AbstractIntelliSenseCommandHandler">
            <summary>
            There are two forms of intellisense that may be active at the same time.  Completion and
            SigHelp.  Completion precedes SigHelp in our command handler because it wants to make sure
            it's operating on a buffer *after* Completion has changed it.  i.e. if "WriteL(" is typed,
            sig help wants to allow completion to complete that to "WriteLine(" before it tried to
            proffer sig help.  If we were to reverse things, then we'd get a bogus situation where sig
            help would see "WriteL(" would have nothing to offer and would return.
            
            However, despite wanting sighelp to receive typechar first and then defer it to completion,
            we want completion to receive other events first (like escape, and navigation keys).  We
            consider completion to have higher priority for those commands.  In order to accomplish that,
            both of the sig help and completion command handlers are imported by this command handler.
            This command handler then delegates escape, up and down to those command handlers.  It always
            tries the completion command handler first, and defers to signature help if completion
            doesn't process the command.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.AutomaticLineEnderCommandArgs">
            <summary>
            Arguments for automatic line ender command
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.BackspaceKeyCommandArgs">
            <summary>
            Arguments for the backspace key being pressed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.BackTabKeyCommandArgs">
            <summary>
            Arguments for the Shift+Tab key combination being pressed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.CopyCommandArgs">
            <summary>
            Arguments for the copy command
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.CopyToInteractiveCommandArgs">
            <summary>
            Arguments for the copy to interactive command.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.CutCommandArgs">
            <summary>
            Arguments for the cut command
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.DeleteKeyCommandArgs">
            <summary>
            Arguments for the backspace key being pressed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.DownKeyCommandArgs">
            <summary>
            Arguments for the Down arrow key being pressed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.EncapsulateFieldCommandArgs">
            <summary>
            Arguments for the rename command.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.EscapeKeyCommandArgs">
            <summary>
            Arguments for the escape key being typed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.ExecuteInInteractiveCommandArgs">
            <summary>
            Arguments for the execute in interactive command.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.ExtractInterfaceCommandArgs">
            <summary>
            Arguments for the Edit.ExtractInterface command.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.ExtractMethodCommandArgs">
            <summary>
            Arguments for the rename command.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.FindReferencesCommandArgs">
            <summary>
            Arguments for find references
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.FormatDocumentCommandArgs">
            <summary>
            Arguments for the Format Document command being invoked.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.FormatSelectionCommandArgs">
            <summary>
            Arguments for the Format Selection command being invoked.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.GoToDefinitionCommandArgs">
            <summary>
            Arguments for GoTo Definition.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.InsertSnippetCommandArgs">
            <summary>
            Arguments for Edit.InsertSnippet
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.OrganizeDocumentCommandArgs">
            <summary>
            Arguments for the Organize Document command being invoked.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.PageDownKeyCommandArgs">
            <summary>
            Arguments for the page down key being pressed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.PageUpKeyCommandArgs">
            <summary>
            Arguments for the page up key being pressed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.RemoveParametersCommandArgs">
            <summary>
            Arguments for the Refactor.RemoveParameters command.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.RemoveUnnecessaryImportsCommandArgs">
            <summary>
            Arguments for the Remove Unused Usings command being invoked.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.RenameCommandArgs">
            <summary>
            Arguments for the rename command.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.StartAutomaticOutliningCommandArgs">
            <summary>
            Arguments for the Edit.Outlining.StartAutomaticOutlining command.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.ReorderParametersCommandArgs">
            <summary>
            Arguments for the Refactor.ReorderParameters command.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.ReturnKeyCommandArgs">
            <summary>
            Arguments for the Return arrow key being pressed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.SaveCommandArgs">
            <summary>
            Arguments for the file being saved.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.SortAndRemoveUnnecessaryImportsCommandArgs">
            <summary>
            Arguments for the Sort and Remove Unused Usings command being invoked.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.SortImportsCommandArgs">
            <summary>
            Arguments for the Sort Imports command being invoked.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.SurroundWithCommandArgs">
            <summary>
            Arguments for Edit.SurroundWith
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.TabKeyCommandArgs">
            <summary>
            Arguments for the Tab key being pressed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.ToggleCompletionModeCommandArgs">
            <summary>
            Arguments for the Toggle Completion Mode command begin invoked.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs">
            <summary>
            Arguments for a character being typed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs.TypedChar">
            <summary>
            The character that was typed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.UpKeyCommandArgs">
            <summary>
            Arguments for the Up arrow key being pressed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.WordDeleteToEndCommandArgs">
            <summary>
            Arguments for the Ctrl+Delete
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Commands.WordDeleteToStartCommandArgs">
            <summary>
            Arguments for the Ctrl+Backspace
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.CommandState">
            <summary>
            Represents the various states that a command might have.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.CommandState.IsAvailable">
            <summary>
            If true, the command should be visible and enabled in the UI.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.CommandState.IsChecked">
            <summary>
            If true, the command should appear as checked (i.e. toggled) in the UI.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.CommandState.DisplayText">
            <summary>
            If specified, returns the custom text that should be displayed in the UI.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan">
            <summary>
            Represents an editor <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> and the <see cref="T:Microsoft.CodeAnalysis.Document"/> the span was produced from.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan.Document">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.Document"/> the span was produced from.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan.SnapshotSpan">
            <summary>
            The editor <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan.#ctor(Microsoft.CodeAnalysis.Document,Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ActiveStatement">
            <summary>
              Looks up a localized string similar to Active Statement.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.AddingAnalyzerReferenceTo">
            <summary>
              Looks up a localized string similar to Adding analyzer reference &apos;{0}&apos; to &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.AddingProject">
            <summary>
              Looks up a localized string similar to Adding project &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.AddingReferenceTo">
            <summary>
              Looks up a localized string similar to Adding reference &apos;{0}&apos; to &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.AddingToWithContent">
            <summary>
              Looks up a localized string similar to Adding &apos;{0}&apos; to &apos;{1}&apos; with content:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.AlreadyTrackingDocumentWithIdenticalKey">
            <summary>
              Looks up a localized string similar to Already tracking document with identical key.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.AnActiveInlineRenameSessionIsActive">
            <summary>
              Looks up a localized string similar to An active inline rename session is still active. Complete it before starting a new one..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Apply">
            <summary>
              Looks up a localized string similar to Apply.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ApplyConflictResolutionEdits">
            <summary>
              Looks up a localized string similar to Display conflict resolutions.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Applying">
            <summary>
              Looks up a localized string similar to Applying &quot;{0}&quot;....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ApplyingEncapsulateField">
            <summary>
              Looks up a localized string similar to Applying &quot;Encapsulate Field&quot; refactoring....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ApplyingExtractMethodRefactoring">
            <summary>
              Looks up a localized string similar to Applying &quot;Extract Method&quot; refactoring....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ApplyRename">
            <summary>
              Looks up a localized string similar to _Apply.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.AutomaticallyCompleting">
            <summary>
              Looks up a localized string similar to Automatically completing....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.AutomaticFormatting">
            <summary>
              Looks up a localized string similar to Automatic Formatting.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.AutomaticLineEnder">
            <summary>
              Looks up a localized string similar to Automatic Line Ender.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.AutomaticPairCompletion">
            <summary>
              Looks up a localized string similar to Automatic Pair Completion.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.AutomaticPairCompletionEndPointMarkerColor">
            <summary>
              Looks up a localized string similar to Automatic Pair Completion End Point Marker Color.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.BraceCompletion">
            <summary>
              Looks up a localized string similar to Brace Completion.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.CalledIn">
            <summary>
              Looks up a localized string similar to Called In.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.CallHierarchy">
            <summary>
              Looks up a localized string similar to Call Hierarchy.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.CallsTo">
            <summary>
              Looks up a localized string similar to Calls To &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.CallsToBaseMember">
            <summary>
              Looks up a localized string similar to Calls To Base Member &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.CallsToInterfaceImplementation">
            <summary>
              Looks up a localized string similar to Calls To Interface Implementation &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.CallsToOverrides">
            <summary>
              Looks up a localized string similar to Calls To Overrides.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Canceled">
            <summary>
              Looks up a localized string similar to Canceled..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.CannotApplyOperationWhileRenameSessionIsActive">
            <summary>
              Looks up a localized string similar to Cannot apply operation while a rename session is active..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.CannotNavigateToTheSymbol">
            <summary>
              Looks up a localized string similar to Cannot navigate to the symbol under the caret..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.CantComparePositionsFromDiffSnapshots">
            <summary>
              Looks up a localized string similar to Can&apos;t compare positions from different text snapshots.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ChangeSignature">
            <summary>
              Looks up a localized string similar to Change Signature.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ChangeSignatureTitle">
            <summary>
              Looks up a localized string similar to Change Signature:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ChangesTheCurrentPromptSettings">
            <summary>
              Looks up a localized string similar to Changes the current prompt settings..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ChangingProjectReferencesFor">
            <summary>
              Looks up a localized string similar to Changing project references for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ClassParts">
            <summary>
              Looks up a localized string similar to Class Parts.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.CommentingCurrentlySelected">
            <summary>
              Looks up a localized string similar to Commenting currently selected text....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.CommentSelection">
            <summary>
              Looks up a localized string similar to Comment Selection.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.CompletingTag">
            <summary>
              Looks up a localized string similar to Completing Tag.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ComputingCallHierarchyInformation">
            <summary>
              Looks up a localized string similar to Computing Call Hierarchy Information.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ComputingFixAllOccurrences">
            <summary>
              Looks up a localized string similar to Computing fix all occurrences code fix....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ComputingRenameInformation">
            <summary>
              Looks up a localized string similar to Computing Rename information....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Conflict">
            <summary>
              Looks up a localized string similar to Conflict.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ConflictsWillBeResolved">
            <summary>
              Looks up a localized string similar to {0} conflict(s) will be resolved.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.DirectlyCalledIn">
            <summary>
              Looks up a localized string similar to Directly Called In.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.DocumentationComment">
            <summary>
              Looks up a localized string similar to Documentation Comment.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.DocumentIsNotCurrentlyBeingTracked">
            <summary>
              Looks up a localized string similar to document is not currently being tracked.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.DocumentMustBeContainedInWorkspace">
            <summary>
              Looks up a localized string similar to Document must be contained in the workspace that created this service.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Encapsulatefield">
            <summary>
              Looks up a localized string similar to Encapsulate Field.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.EncapsulateFieldTitle">
            <summary>
              Looks up a localized string similar to Encapsulate Field:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.EngineMustBeAttachedToAnInteractiveWindow">
            <summary>
              Looks up a localized string similar to Engine must be attached to an Interactive Window..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ExtractMethod">
            <summary>
              Looks up a localized string similar to Extract Method.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ExtractMethodAsyncErrorFix">
             <summary>
               Looks up a localized string similar to We can fix the error by not making struct &quot;out/ref&quot; parameter(s). 
            Do you want to proceed?.
             </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ExtractMethodFailedReasons">
            <summary>
              Looks up a localized string similar to Extract method failed with following reasons :.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ExtractMethodStillGenerateCode">
            <summary>
              Looks up a localized string similar to Do you still want to proceed? it will generate broken code..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FindingEnclosingSpan">
            <summary>
              Looks up a localized string similar to Finding enclosing span....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FindingReferences">
            <summary>
              Looks up a localized string similar to Finding references....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FindingReferencesOf">
            <summary>
              Looks up a localized string similar to Finding references of &quot;{0}&quot;....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FindingSpanOfNextSibling">
            <summary>
              Looks up a localized string similar to Finding span of next sibling....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FindingSpanOfPreviousSibling">
            <summary>
              Looks up a localized string similar to Finding span of previous sibling....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FindingTokenToRename">
            <summary>
              Looks up a localized string similar to Finding token to rename....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FindingWordExtent">
            <summary>
              Looks up a localized string similar to Finding word extent....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FindReferences">
            <summary>
              Looks up a localized string similar to Find References.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FixAllOccurrences">
            <summary>
              Looks up a localized string similar to Fix all occurrences.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FixAllOccurrencesIn">
            <summary>
              Looks up a localized string similar to Fix all occurrences in.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_InlineRename">
            <summary>
              Looks up a localized string similar to Inline Rename.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_PreprocessorText">
            <summary>
              Looks up a localized string similar to Preprocessor Text.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_Punctuation">
            <summary>
              Looks up a localized string similar to Punctuation.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_RenameTracking">
            <summary>
              Looks up a localized string similar to Rename Tracking.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_StringVerbatim">
            <summary>
              Looks up a localized string similar to String - Verbatim.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_UnnecessaryCode">
            <summary>
              Looks up a localized string similar to Unnecessary Code.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_UserTypes_Classes">
            <summary>
              Looks up a localized string similar to User Types - Classes.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_UserTypes_Delegates">
            <summary>
              Looks up a localized string similar to User Types - Delegates.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_UserTypes_Enums">
            <summary>
              Looks up a localized string similar to User Types - Enums.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_UserTypes_Interfaces">
            <summary>
              Looks up a localized string similar to User Types - Interfaces.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_UserTypes_Modules">
            <summary>
              Looks up a localized string similar to User Types - Modules.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_UserTypes_Structures">
            <summary>
              Looks up a localized string similar to User Types - Structures.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_UserTypes_TypeParameters">
            <summary>
              Looks up a localized string similar to User Types - Type Parameters.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_VBXmlLiterals_AttributeName">
            <summary>
              Looks up a localized string similar to VB XML Literals - Attribute Name.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_VBXmlLiterals_AttributeQuotes">
            <summary>
              Looks up a localized string similar to VB XML Literals - Attribute Quotes.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_VBXmlLiterals_AttributeValue">
            <summary>
              Looks up a localized string similar to VB XML Literals - Attribute Value.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_VBXmlLiterals_CDataSection">
            <summary>
              Looks up a localized string similar to VB XML Literals - CData Section.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_VBXmlLiterals_Comment">
            <summary>
              Looks up a localized string similar to VB XML Literals - Comment.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_VBXmlLiterals_Delimiter">
            <summary>
              Looks up a localized string similar to VB XML Literals - Delimiter.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_VBXmlLiterals_EmbeddedExpression">
            <summary>
              Looks up a localized string similar to VB XML Literals - Embedded Expression.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_VBXmlLiterals_EntityReference">
            <summary>
              Looks up a localized string similar to VB XML Literals - Entity Reference.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_VBXmlLiterals_Name">
            <summary>
              Looks up a localized string similar to VB XML Literals - Name.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_VBXmlLiterals_ProcessingInstruction">
            <summary>
              Looks up a localized string similar to VB XML Literals - Processing Instruction.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_VBXmlLiterals_Text">
            <summary>
              Looks up a localized string similar to VB XML Literals - Text.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_XmlDocComments_AttributeName">
            <summary>
              Looks up a localized string similar to XML Doc Comments - Attribute Name.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_XmlDocComments_AttributeQuotes">
            <summary>
              Looks up a localized string similar to XML Doc Comments - Attribute Quotes.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_XmlDocComments_AttributeValue">
            <summary>
              Looks up a localized string similar to XML Doc Comments - Attribute Value.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_XmlDocComments_CDataSection">
            <summary>
              Looks up a localized string similar to XML Doc Comments - CData Section.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_XmlDocComments_Comment">
            <summary>
              Looks up a localized string similar to XML Doc Comments - Comment.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_XmlDocComments_Delimiter">
            <summary>
              Looks up a localized string similar to XML Doc Comments - Delimiter.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_XmlDocComments_EntityReference">
            <summary>
              Looks up a localized string similar to XML Doc Comments - Entity Reference.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_XmlDocComments_Name">
            <summary>
              Looks up a localized string similar to XML Doc Comments - Name.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_XmlDocComments_ProcessingInstruction">
            <summary>
              Looks up a localized string similar to XML Doc Comments - Processing Instruction.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FontAndColors_XmlDocComments_Text">
            <summary>
              Looks up a localized string similar to XML Doc Comments - Text.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FormatDocument">
            <summary>
              Looks up a localized string similar to Format Document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FormatPaste">
            <summary>
              Looks up a localized string similar to Format Paste.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FormatSelection">
            <summary>
              Looks up a localized string similar to Format Selection.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Formatting">
            <summary>
              Looks up a localized string similar to Formatting.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FormattingCurrentlySelected">
            <summary>
              Looks up a localized string similar to Formatting currently selected text....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FormattingDocument">
            <summary>
              Looks up a localized string similar to Formatting document....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FormattingPastedText">
            <summary>
              Looks up a localized string similar to Formatting pasted text....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FormatToken">
            <summary>
              Looks up a localized string similar to Format Token.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FoundReferenceInFile">
            <summary>
              Looks up a localized string similar to found 1 reference in 1 file.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FoundReferencesInFile">
            <summary>
              Looks up a localized string similar to found {0} references in 1 file.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FoundReferencesInMultipleFiles">
            <summary>
              Looks up a localized string similar to found {0} references in {1} files.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.FromMetadata">
            <summary>
              Looks up a localized string similar to from metadata.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.GivenWorkspaceDoesntSupportUndo">
            <summary>
              Looks up a localized string similar to Given Workspace doesn&apos;t support Undo.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.GoToDefinition">
            <summary>
              Looks up a localized string similar to Go to Definition.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.HighlightedDefinition">
            <summary>
              Looks up a localized string similar to Highlighted Definition.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ImplementedBy">
            <summary>
              Looks up a localized string similar to Implemented By.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Implements">
            <summary>
              Looks up a localized string similar to Implements.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ImplementsArg">
            <summary>
              Looks up a localized string similar to Implements &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.IndirectlyCalledIn">
            <summary>
              Looks up a localized string similar to Indirectly Called In.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.InheritedBy">
            <summary>
              Looks up a localized string similar to Inherited By.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Inherits">
            <summary>
              Looks up a localized string similar to Inherits.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Initializers">
            <summary>
              Looks up a localized string similar to Initializers.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.InlineRenameFixup">
            <summary>
              Looks up a localized string similar to Inline Rename Fixup.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.InlineRenameResolvedConflict">
            <summary>
              Looks up a localized string similar to Inline Rename Resolved Conflict.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.InsertingDocumentationCommen">
            <summary>
              Looks up a localized string similar to Inserting documentation comment....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.InsertNewLine">
            <summary>
              Looks up a localized string similar to Insert new line.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Intellisense">
            <summary>
              Looks up a localized string similar to Intellisense.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.IntellisenseCommitFormatting">
            <summary>
              Looks up a localized string similar to Intellisense Commit Formatting.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.InterfaceParts">
            <summary>
              Looks up a localized string similar to Interface Parts.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.IsNotAValidIdentifier">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid identifier.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.LightBulbSessionIsAlreadyDismissed">
            <summary>
              Looks up a localized string similar to Light bulb session is already dismissed..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Line">
            <summary>
              Looks up a localized string similar to {0} - (Line {1}).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.LoadingPeekInformation">
            <summary>
              Looks up a localized string similar to Loading Peek information....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.NavigatingToDefinition">
            <summary>
              Looks up a localized string similar to Navigating to definition....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.NavigationBars">
            <summary>
              Looks up a localized string similar to Navigation Bars.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.NoDerivedTypesFound">
            <summary>
              Looks up a localized string similar to No derived types found..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.NoImplementationsFound">
            <summary>
              Looks up a localized string similar to No implementations found..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.NoInformationFound">
            <summary>
              Looks up a localized string similar to No information found..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.NoReferencesFound">
            <summary>
              Looks up a localized string similar to No references found..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.NotASourceError">
            <summary>
              Looks up a localized string similar to Not a source error, line/column unavailable.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.NoUsagesFound">
            <summary>
              Looks up a localized string similar to No usages found..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.OperationNotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; does not support the &apos;{1}&apos; operation. However, it may contain nested &apos;{2}&apos;s (see &apos;{2}.{3}&apos;) that support this operation..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.OrganizeDocument">
            <summary>
              Looks up a localized string similar to Organize Document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.OrganizingDocument">
            <summary>
              Looks up a localized string similar to Organizing document....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.OverriddenBy">
            <summary>
              Looks up a localized string similar to Overridden By.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Overrides">
            <summary>
              Looks up a localized string similar to Overrides.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Peek">
            <summary>
              Looks up a localized string similar to Peek.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.PleaseResolveErrorsInYourCodeBeforeRenaming">
            <summary>
              Looks up a localized string similar to Please resolve errors in your code before renaming this element..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.PleaseSelectTheDefinitionOf">
            <summary>
              Looks up a localized string similar to Please select the definition of the field to encapsulate..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.PreviewChanges">
            <summary>
              Looks up a localized string similar to Preview Changes.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.PreviewChangesOf">
            <summary>
              Looks up a localized string similar to Preview Changes - {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.PreviewChangesRootNodeText">
            <summary>
              Looks up a localized string similar to Changes.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.PreviewChangesSummaryText">
            <summary>
              Looks up a localized string similar to Preview changes.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.PreviewCodeChanges">
            <summary>
              Looks up a localized string similar to Preview Code Changes:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Project">
            <summary>
              Looks up a localized string similar to project .
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ReferencedIn">
            <summary>
              Looks up a localized string similar to Referenced In.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ReferencesToField">
            <summary>
              Looks up a localized string similar to References To Field &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.RefreshingNavigationBars">
            <summary>
              Looks up a localized string similar to Refreshing navigation bars....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.RemovingAnalyzerReferenceFrom">
            <summary>
              Looks up a localized string similar to Removing analyzer reference &apos;{0}&apos; from &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.RemovingFromWithContent">
            <summary>
              Looks up a localized string similar to Removing &apos;{0}&apos; from &apos;{1}&apos; with content:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.RemovingProject">
            <summary>
              Looks up a localized string similar to Removing project &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.RemovingReferenceFrom">
            <summary>
              Looks up a localized string similar to Removing reference &apos;{0}&apos; from &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Rename">
            <summary>
              Looks up a localized string similar to Rename.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Rename1">
            <summary>
              Looks up a localized string similar to Rename &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.RenameApplyToolTip">
            <summary>
              Looks up a localized string similar to Apply.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.RenameCancelToolTip">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.RenameOperationWasCancelled">
            <summary>
              Looks up a localized string similar to Rename operation was cancelled or is not valid.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.RenameOperationWasNotProperlyCompleted">
            <summary>
              Looks up a localized string similar to Rename operation was not properly completed. Some file might not have been updated..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.RenameOverloads">
            <summary>
              Looks up a localized string similar to Include _overload(s).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.RenamePreviewChanges">
            <summary>
              Looks up a localized string similar to _Preview changes.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.RenameSymbol">
            <summary>
              Looks up a localized string similar to Rename Symbol.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.RenameTo">
            <summary>
              Looks up a localized string similar to Rename &apos;{0}&apos; to &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.RenameToTitle">
            <summary>
              Looks up a localized string similar to Rename &apos;{0}&apos; to &apos;{1}&apos;:.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.RenameToWithPreview">
            <summary>
              Looks up a localized string similar to Rename &apos;{0}&apos; to &apos;{1}&apos; with preview....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.RenamingAnonymousTypeMemberNotSupported">
            <summary>
              Looks up a localized string similar to Renaming anonymous type members is not yet supported..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.RudeEdit">
            <summary>
              Looks up a localized string similar to Rude Edit.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.SearchInComments">
            <summary>
              Looks up a localized string similar to Include _comments.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Searching">
            <summary>
              Looks up a localized string similar to Searching....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.SearchInStrings">
            <summary>
              Looks up a localized string similar to Include _strings.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.SmartIndenting">
            <summary>
              Looks up a localized string similar to Smart Indenting.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.StartRename">
            <summary>
              Looks up a localized string similar to Start Rename.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.StructParts">
            <summary>
              Looks up a localized string similar to Struct Parts.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.SymbolCannotBeNamespace">
            <summary>
              Looks up a localized string similar to &apos;symbol&apos; cannot be a namespace..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.TextBufferChange">
            <summary>
              Looks up a localized string similar to Text Buffer Change.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.TextNavigation">
            <summary>
              Looks up a localized string similar to Text Navigation.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.TheBufferIsNotPartOfAWorkspace">
            <summary>
              Looks up a localized string similar to The buffer is not part of a workspace..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.TheDefinitionOfTheObjectIsHidden">
            <summary>
              Looks up a localized string similar to The definition of the object is hidden..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.TheTokenIsNotContainedInWorkspace">
            <summary>
              Looks up a localized string similar to The token is not contained in the workspace..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.TheTransactionIsAlreadyComplete">
            <summary>
              Looks up a localized string similar to The transaction is already complete..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.TheTriggerspanIsNotIncludedInWorkspace">
            <summary>
              Looks up a localized string similar to The triggerSpan is not included in the given workspace..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.ThisSessionHasAlreadyBeenDismissed">
            <summary>
              Looks up a localized string similar to This session has already been dismissed..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Type">
            <summary>
              Looks up a localized string similar to type .
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.TypeParts">
            <summary>
              Looks up a localized string similar to Type Parts.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.UncommentingCurrentlySelecte">
            <summary>
              Looks up a localized string similar to Uncommenting currently selected text....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.UncommentSelection">
            <summary>
              Looks up a localized string similar to Uncomment Selection.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.UnexpectedText">
            <summary>
              Looks up a localized string similar to Unexpected text: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.UnresolvableConflicts">
            <summary>
              Looks up a localized string similar to {0} unresolvable conflict(s).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.UpdatingFiles">
            <summary>
              Looks up a localized string similar to Updating files....
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.VariadicSignaturehelpitemMustHaveOneParam">
            <summary>
              Looks up a localized string similar to Variadic SignatureHelpItem must have at least one parameter..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.Warning">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.XMLEndTagCompletion">
            <summary>
              Looks up a localized string similar to XML End Tag Completion.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.YouCannotRenameElementsFromPrevSubmissions">
            <summary>
              Looks up a localized string similar to You cannot rename elements from previous submissions..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.YouCannotRenameElementsInMetadata">
            <summary>
              Looks up a localized string similar to You cannot rename elements that are defined in metadata..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.YouCannotRenameOperators">
            <summary>
              Looks up a localized string similar to You cannot rename operators..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.YouCannotRenameThisElement">
            <summary>
              Looks up a localized string similar to You cannot rename this element..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.EditorFeaturesResources.YouMustRenameAnIdentifier">
            <summary>
              Looks up a localized string similar to You must rename an identifier..
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.ExportContentTypeLanguageServiceAttribute">
            <summary>
            Specifies the exact type of the service exported by the ILanguageService.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.ICommandHandler">
            <summary>
            This interface is implemented by a class that implements at least one strongly-typed
            ICommandHandler&lt;T&gt;. When implementing a strongly-typed ICommandHandler, you should MEF
            export this base interface.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.ICommandHandler`1">
            <summary>
            Implement to handle a command before it is processed by the editor. To export this, export
            the non-generic ICommandHandler.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.ICommandHandler`1.GetCommandState(`0,System.Func{Microsoft.CodeAnalysis.Editor.CommandState})">
            <summary>
            Called to determine the state of the command.
            </summary>
            <param name="args">The arguments of the command, which contains data about the event
            that fired.</param>
            <param name="nextHandler">A delegate which calls the next command handler in the chain.
            Every command handler must invoke this delegate if they do not wish to fully handle the
            command themselves.</param>
            <returns>Return a CommandState instance.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.ICommandHandler`1.ExecuteCommand(`0,System.Action)">
            <summary>
            Called when the command is executed.
            </summary>
            <param name="args">The arguments of the command, which contains data about the event
            that fired.</param>
            <param name="nextHandler">A delegate which calls the next handler in the chain. Every
            command handler must invoke this delegate if they do not wish to fully handle the
            command themselves.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames">
            <summary>
            Command handler names
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.AutomaticCompletion">
            <summary>
            Command handler name for Automatic Pair Completion
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.AutomaticLineEnder">
            <summary>
            Command handler name for Automatic Line Ender
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.ChangeSignature">
            <summary>
            Command handler name for Change Signature.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.CommentSelection">
            <summary>
            Command handler name for Comment Selection.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.Commit">
            <summary>
            Command handler name for Commit.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.Completion">
            <summary>
            Command handler name for Completion. Some additional Completion commands are handled by
            the <see cref="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.IntelliSense"/> command handler.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.DocumentationComments">
            <summary>
            Command handler name for Documentation Comments.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.EndConstruct">
            <summary>
            Command handler name for End Construct.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.EventHookup">
            <summary>
            Command handler name for Event Hookup.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.ExtractInterface">
            <summary>
            Command handler name for Extract Interface
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.ExtractMethod">
            <summary>
            Command handler name for Extract Method
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.FindReferences">
            <summary>
            Command handler name for Find References.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.FormatDocument">
            <summary>
            Command handler name for Format Document.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.GoToDefinition">
            <summary>
            Command handler name for Go to Definition.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.Indent">
            <summary>
            Command handler name for Indent.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.IntelliSense">
            <summary>
            Command handler name for IntelliSense. This command handler handles some commands for
            <see cref="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.Completion"/>, <see cref="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.QuickInfo"/>, and <see cref="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.SignatureHelp"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.NavigateToHighlightedReference">
            <summary>
            Command handler name for Navigate to Highlighted Reference.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.OrganizeDocument">
            <summary>
            Command handler name for Organize Document.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.QuickInfo">
            <summary>
            Command handler name for Quick Info. Some additional Quick Info commands are handled by
            the <see cref="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.IntelliSense"/> command handler.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.Rename">
            <summary>
            Command handler name for Rename.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.RenameTrackingCancellation">
            <summary>
            Command handler name for Rename Tracking cancellation.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.SignatureHelp">
            <summary>
            Command handler name for Signature Help. Some additional Signature Help commands are
            handled by the <see cref="F:Microsoft.CodeAnalysis.Editor.PredefinedCommandHandlerNames.IntelliSense"/> command handler.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.ICustomCommitCompletionProvider">
            <summary>
            Interface to implement for a completion provider that wants to provide customized commit
            behavior.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCompletionProviderNames.Keyword">
            <summary>
            Completion provider for language keywords.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCompletionProviderNames.Symbol">
            <summary>
            Completion provider for language symbols.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCompletionProviderNames.SpeculativeT">
            <summary>
            Completion provider for C# speculative "T" symbol.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCompletionProviderNames.ContextualKeyword">
            <summary>
            Completion provider for contextual keywords.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCompletionProviderNames.ObjectCreation">
            <summary>
            Completion provider that preselects an appropriate type when creating a new object.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCompletionProviderNames.Enum">
            <summary>
            Completion provider that comes up and provides Enum values in appropriate contexts.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.PredefinedCompletionRulesFactoryNames.RoslynCompletionRulesFactory">
            <summary>
            Completion Rules Factory for Roslyn
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.IDeferredQuickInfoContent">
            <summary>
            Interface to allow providers to return some sort of quick info content whose creation can be
            deferred to a later point (and on the UI thread)
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.ISignatureHelpProvider.IsTriggerCharacter(System.Char)">
            <summary>
            Returns true if the character might trigger completion, 
            e.g. '(' and ',' for method invocations 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.ISignatureHelpProvider.IsRetriggerCharacter(System.Char)">
            <summary>
            Returns true if the character might end a Signature Help session, 
            e.g. ')' for method invocations.  
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.ISignatureHelpProvider.GetItemsAsync(Microsoft.CodeAnalysis.Document,System.Int32,Microsoft.CodeAnalysis.Editor.SignatureHelpTriggerInfo,System.Threading.CancellationToken)">
            <summary>
            Returns valid signature help items at the specified position in the document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.SignatureHelpItems.Items">
            <summary>
            The list of items to present to the user.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.SignatureHelpItems.ApplicableSpan">
            <summary>
            The span this session applies to.
            
            Navigation outside this span will cause signature help to be dismissed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.SignatureHelpItems.ArgumentIndex">
            <summary>
            Returns the specified argument index that the provided position is at in the current document.  This 
            index may be greater than the number of arguments in the selected <see cref="T:Microsoft.CodeAnalysis.Editor.SignatureHelpItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.SignatureHelpItems.ArgumentCount">
            <summary>
            Returns the total number of arguments that have been typed in the current document.  This may be 
            greater than the ArgumentIndex if there are additional arguments after the provided position.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.SignatureHelpItems.ArgumentName">
            <summary>
            Returns the name of specified argument at the current position in the document.  
            This only applies to languages that allow the user to provide named arguments.
            If no named argument exists at the current position, then null should be returned. 
            
            This value is used to determine which documentation comment should be provided for the current
            parameter.  Normally this is determined simply by determining the parameter by index.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.SignatureHelpItems.SelectedItemIndex">
            <summary>
            The item to select by default.  If this is <code>null</code> then the controller will
            pick the first item that has enough arguments to be viable based on what argument 
            position the user is currently inside of.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.SignatureHelpItem.IsVariadic">
            <summary>
            True if this signature help item can have an unbounded number of arguments passed to it.
            If it is variadic then the last parameter will be considered selected, even if the
            selected parameter index strictly goes past the number of defined parameters for this
            item.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.SignatureHelpParameter.Name">
            <summary>
            The name of this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.SignatureHelpParameter.DocumentationFactory">
            <summary>
            Documentation for this parameter.  This should normally be presented to the user when
            this parameter is selected.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.SignatureHelpParameter.PrefixDisplayParts">
            <summary>
            Display parts to show before the normal display parts for the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.SignatureHelpParameter.SuffixDisplayParts">
            <summary>
            Display parts to show after the normal display parts for the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.SignatureHelpParameter.DisplayParts">
            <summary>
            Display parts for this parameter.  This should normally be presented to the user as part
            of the entire signature display.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.SignatureHelpParameter.IsOptional">
            <summary>
            True if this parameter is optional or not.  Optional parameters may be presented in a
            different manner to users.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.SignatureHelpParameter.SelectedDisplayParts">
            <summary>
            Display parts for this parameter that should be presented to the user when this
            parameter is selected.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.SignatureHelpTriggerReason.InvokeSignatureHelpCommand">
            <summary>
            Signature Help was triggered through the 'Invoke Signature Help' command
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.SignatureHelpTriggerReason.TypeCharCommand">
            <summary>
            Signature Help was triggered through the 'Type Char' command.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.SignatureHelpTriggerReason.RetriggerCommand">
            <summary>
            Signature Help was triggered through typing a closing brace.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.ITaskItem.MappedFilePath">
            <summary>
            Null if path is not mapped and <see cref="P:Microsoft.CodeAnalysis.Editor.ITaskItem.OriginalFilePath"/> contains the actual path.
            Note that the value might be a relative path. In that case <see cref="P:Microsoft.CodeAnalysis.Editor.ITaskItem.OriginalFilePath"/> should be used
            as a base path for path resolution.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.ITodoListProvider">
            <summary>
            Returns Roslyn todo list from the workspace.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Editor.ITodoListProvider.TodoListUpdated">
            <summary>
            An event that is raised when the todo list has changed.  
            
            When an event handler is newly added, this event will fire for the currently available todo items and then
            afterward for any changes since.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.TaskListEventArgs.Id">
            <summary>
            The identity of task item group. 
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.TaskListEventArgs.TaskListType">
            <summary>
            task item type
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.TaskListEventArgs.Workspace">
            <summary>
            Workspace this task items are associated with
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.TaskListEventArgs.ProjectId">
            <summary>
            projectId this task items are associated with
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.TaskListEventArgs.DocumentId">
            <summary>
            documentId this task items are associated with
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.TaskListEventArgs.TaskItems">
            <summary>
            The task items associated with the ID.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Host.IPreviewDialogService">
            <summary>
            Displays the Preview Changes Dialog comparing two solutions.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Host.IPreviewDialogService.PreviewChanges(System.String,System.String,System.String,System.String,Microsoft.CodeAnalysis.Glyph,Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Solution,System.Boolean)">
            <summary>
            Presents the user a preview of the changes, based on a textual diff
            between <paramref name="newSolution"/> and <paramref name="oldSolution"/>.
            </summary>
            <param name="title">The title of the preview changes dialog.</param>
            <param name="helpString">The keyword used by F1 help in the dialog.</param>
            <param name="description">Text to display above the treeview in the dialog.</param>
            <param name="topLevelName">The name of the root item in the treeview in the dialog.</param>
            <param name="topLevelGlyph">The <see cref="T:Microsoft.CodeAnalysis.Glyph"/> of the root item in the treeview.</param>
            <param name="newSolution">The changes to preview.</param>
            <param name="oldSolution">The baseline solution.</param>
            <param name="showCheckBoxes">Whether or not preview dialog should display item checkboxes.</param>
            <returns>Returns <paramref name="oldSolution"/> with the changes selected in the dialog
            applied. Returns null if cancelled.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Host.IWaitIndicator.Wait(System.String,System.String,System.Boolean,System.Action{Microsoft.CodeAnalysis.Editor.Host.IWaitContext})">
            <summary>
            Schedule the action on the caller's thread and wait for the task to complete.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.IContentTypeLanguageService">
            <summary>
            Service to provide the default content type for a language.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.IForegroundNotificationService">
            <summary>
            provide a way to call APIs from UI thread
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IForegroundNotificationService.RegisterNotification(System.Func{System.Boolean},Microsoft.CodeAnalysis.Shared.TestHooks.IAsyncToken,System.Threading.CancellationToken)">
            <summary>
            if action return true, the service will call it back again when it has time.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.IInlineRenameService">
            <summary>
            Provides services for starting an interactive rename session.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameService.StartInlineSession(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)">
            <summary>
            Starts an interactive rename session. If an existing inline session was active, it will
            commit the previous session, possibly causing changes to the text buffer.
            </summary>
            <param name="document">The Document containing the triggerSpan.</param>
            <param name="triggerSpan">The triggerSpan itself.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The rename session.</returns>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameService.ActiveSession">
            <summary>
            Returns the currently active inline session, or null if none is active.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.InlineRenameSessionInfo.CanRename">
            <summary>
            Whether or not the entity at the selected location can be renamed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.InlineRenameSessionInfo.LocalizedErrorMessage">
            <summary>
            Provides the reason that can be displayed to the user if the entity at the selected 
            location cannot be renamed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.InlineRenameSessionInfo.Session">
            <summary>
            The session created if it was possible to rename the entity.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameSession.Cancel">
            <summary>
            Cancels the rename session, and undoes any edits that had been performed by the session.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameSession.Commit(System.Boolean)">
            <summary>
            Dismisses the rename session, completing the rename operation across all files.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.IInlineRenameUndoManager">
            <summary>
            This interface contains the methods required to manipulate the undo stack
            in each buffer during an inline rename session.  VS and ETA have differing
            implementations
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IMetadataAsSourceFileService.GetGeneratedFileAsync(Microsoft.CodeAnalysis.Project,Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Generates a file on disk containing general information about the symbol's containing
            assembly, and the formatted source code for the public, protected, and
            protected-or-internal interface of which the given ISymbol is or is a part of.
            </summary>
            <param name="project">The project from which the symbol to generate source for came
            from.</param>
            <param name="symbol">The symbol whose interface to generate source for</param>
            <param name="cancellationToken">To cancel project and document operations</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.AutomaticCompletion.AbstractAutomaticLineEnderCommandHandler">
            <summary>
            abstract line ender command handler
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.AutomaticCompletion.AbstractAutomaticLineEnderCommandHandler.GetEndingString(Microsoft.CodeAnalysis.Document,System.Int32,System.Threading.CancellationToken)">
            <summary>
            get ending string if there is one
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.AutomaticCompletion.AbstractAutomaticLineEnderCommandHandler.NextAction(Microsoft.VisualStudio.Text.Operations.IEditorOperations,System.Action)">
            <summary>
            do next action
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.AutomaticCompletion.AbstractAutomaticLineEnderCommandHandler.FormatAndApply(Microsoft.CodeAnalysis.Document,System.Int32,System.Threading.CancellationToken)">
            <summary>
            format after inserting ending string
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.AutomaticCompletion.AbstractAutomaticLineEnderCommandHandler.GetInsertionPoint(Microsoft.CodeAnalysis.Document,Microsoft.VisualStudio.Text.ITextSnapshotLine,System.Threading.CancellationToken)">
            <summary>
            return insertion point for the ending string
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.AutomaticCompletion.AbstractAutomaticLineEnderCommandHandler.InsertEndingIfRequired(Microsoft.CodeAnalysis.Document,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            insert ending string if there is one to insert
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.AutomaticCompletion.Extensions.Format(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.CodeAnalysis.Text.TextSpan,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Formatting.Rules.IFormattingRule})">
            <summary>
            format span
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.AutomaticCompletion.Extensions.CreateEditTransaction(Microsoft.VisualStudio.Text.Editor.ITextView,System.String,Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry,Microsoft.VisualStudio.Text.Operations.IEditorOperationsFactoryService)">
            <summary>
            create caret preserving edit transaction with automatic code change undo merging policy
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.AutomaticCompletion.Extensions.InsertText(Microsoft.CodeAnalysis.Document,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            insert text to workspace and get updated version of the document
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.AutomaticCompletion.Extensions.ReplaceText(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.String,System.Threading.CancellationToken)">
            <summary>
            replace text to workspace and get updated version of the document
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.AutomaticCompletion.Extensions.ApplyTextChange(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextChange,System.Threading.CancellationToken)">
            <summary>
            apply text changes to workspace and get updated version of the document
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.AutomaticCompletion.Extensions.ApplyTextChanges(Microsoft.CodeAnalysis.Document,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChange},System.Threading.CancellationToken)">
            <summary>
            apply text changes to workspace and get updated version of the document
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.AutomaticCompletion.Extensions.UpdateDocument(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.DocumentId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChange},System.Threading.CancellationToken)">
            <summary>
            Update the solution so that the document with the Id has the text changes
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.TagComputer">
            <summary>
            A classifier that operates only on the syntax of the source and not the semantics.  Note:
            this class operates in a hybrid sync/async manner.  Specifically, while classification
            happens synchronously, it may be synchronous over a parse tree which is out of date.  Then,
            asynchronously, we will attempt to get an up to date parse tree for the file. When we do, we
            will determine which sections of the file changed and we will use that to notify the editor
            about what needs to be reclassified.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.TagComputer.LastLineCache">
            <summary>
            it is a helper class that encapsulates logic on holding onto last classification result
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService">
            <summary>
            A service representing a handlers of command handlers for a view or buffer.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService._commandHandlersByTypeAndContentType">
            <summary>
            This dictionary acts as a cache so we can avoid having to look through the full list of
            handlers every time we need handlers of a specific type, for a given content type. The
            value of each key is a class of type List&lt;ICommandHandler&lt;T&gt;&gt;, but since
            there is no way to express that in a generic way under .NET I must simply use "object"
            as the type associated with each key.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.GetHandlers``1(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Returns a list of ICommandHandlers of a given type that apply to a given content type.
            The result is cached so repeated calls are fast.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.ExecuteHandlers``1(System.Collections.Generic.IList{Microsoft.CodeAnalysis.Editor.ICommandHandler{``0}},``0,System.Action)">
            <summary>
            Executes the list of command handlers in order, starting at index, passing args to each
            one. If all handlers choose to call the nextHandler lambda, the lastHandler lambda is
            called.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerService.GetCommandState``1(System.Collections.Generic.IList{Microsoft.CodeAnalysis.Editor.ICommandHandler{``0}},``0,System.Func{Microsoft.CodeAnalysis.Editor.CommandState})">
            <summary>
            Executes the list of command handlers in order, starting at index, passing args to each
            one. If all handlers choose to call the nextHandler lambda, the lastHandler lambda is
            called.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerServiceFactory">
            <summary>
            This component manages the lifetimes of command handlers. It is a singleton that is shared
            between any components that import it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerServiceFactory.CreateCollectionForView(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Returns a collection of ICommandHandlers that match the appropriate content types for this view.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.Commands.CommandHandlerServiceFactory.CreateCollectionForBuffer(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Returns a collection of ICommandHandlers that match the appropriate content type of the given buffer.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.CommentUncommentSelectionCommandHandler.ExecuteCommand(Microsoft.CodeAnalysis.Editor.Commands.CommentSelectionCommandArgs,System.Action)">
            <summary>
            Comment the selected spans, and reset the selection.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.CommentUncommentSelectionCommandHandler.ExecuteCommand(Microsoft.CodeAnalysis.Editor.Commands.UncommentSelectionCommandArgs,System.Action)">
            <summary>
            Uncomment the selected spans, and reset the selection.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.CommentUncommentSelectionCommandHandler.CollectEdits(Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.ICommentUncommentService,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.Collections.Generic.List{Microsoft.CodeAnalysis.Text.TextChange},System.Collections.Generic.List{Microsoft.VisualStudio.Text.ITrackingSpan},Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.CommentUncommentSelectionCommandHandler.Operation)">
             <summary>
             Add the necessary edits to the given spans. Also collect tracking spans over each span.
            
             Internal so that it can be called by unit tests.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.CommentUncommentSelectionCommandHandler.CommentSpan(Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.ICommentUncommentService,Microsoft.VisualStudio.Text.SnapshotSpan,System.Collections.Generic.List{Microsoft.CodeAnalysis.Text.TextChange},System.Collections.Generic.List{Microsoft.VisualStudio.Text.ITrackingSpan})">
            <summary>
            Add the necessary edits to comment out a single span.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.CommentUncommentSelectionCommandHandler.InsertText(System.Collections.Generic.List{Microsoft.CodeAnalysis.Text.TextChange},System.Int32,System.String)">
            <summary>
            Record "Insert text" text changes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.CommentUncommentSelectionCommandHandler.DeleteText(System.Collections.Generic.List{Microsoft.CodeAnalysis.Text.TextChange},Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Record "Delete text" text changes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.CommentUncommentSelectionCommandHandler.UncommentSpan(Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.ICommentUncommentService,Microsoft.VisualStudio.Text.SnapshotSpan,System.Collections.Generic.List{Microsoft.CodeAnalysis.Text.TextChange},System.Collections.Generic.List{Microsoft.VisualStudio.Text.ITrackingSpan})">
            <summary>
            Add the necessary edits to uncomment out a single span.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.CommentUncommentSelectionCommandHandler.ApplyCommentToNonBlankLines(Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.ICommentUncommentService,System.Collections.Generic.List{Microsoft.CodeAnalysis.Text.TextChange},System.Tuple{Microsoft.VisualStudio.Text.ITextSnapshotLine,Microsoft.VisualStudio.Text.ITextSnapshotLine},System.Int32)">
            <summary>
            Adds edits to comment out each non-blank line, at the given indent.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.CommentUncommentSelectionCommandHandler.DetermineSmallestIndent(Microsoft.VisualStudio.Text.SnapshotSpan,System.Tuple{Microsoft.VisualStudio.Text.ITextSnapshotLine,Microsoft.VisualStudio.Text.ITextSnapshotLine})">
            <summary> Given a set of lines, find the minimum indent of all of the non-blank, non-whitespace lines.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.CommentUncommentSelectionCommandHandler.DetermineFirstAndLastLine(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Given a span, find the first and last line that are part of the span.  NOTE: If the span ends in column zero,
            we back up to the previous line, to handle the case where the user used shift + down to select a bunch of
            lines.  They probably don't want the last line commented in that case.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.CommentSelection.CommentUncommentSelectionCommandHandler.SpanIncludesAllTextOnIncludedLines(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Returns true if the span includes all of the non-whitespace text on the first and last line.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.ContentTypes.ContentTypeDefinitions.RoslynContentTypeDefinition">
            <summary>
            Definition of a content type that is a base definition for all content types supported by Roslyn.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.Debugging.ILanguageDebugInfoService.GetDataTipInfoAsync(Microsoft.CodeAnalysis.Document,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Find an appropriate span to pass the debugger given a point in a snapshot.  Optionally
            pass back a string to pass to the debugger instead if no good span can be found.  For
            example, if the user hovers on "var" then we actually want to pass the fully qualified
            name of the type that 'var' binds to to the debugger.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.EditAndContinue.ActiveStatementTrackingService">
            <summary>
            Tracks active statements for the debugger during an edit session.
            </summary>
            <remarks>
            An active statement is a source statement that occurs in a stack trace of a thread.
            Active statements are visualized via a gray marker in the text editor.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.ExtractMethod.AbstractExtractMethodCommandHandler.TryNotifyFailureToUser(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodResult)">
            <returns>
            True: if a failure notification was displayed or the user did not want to proceed in a best effort scenario. 
                  Extract Method does not proceed further and is done.
            False: the user proceeded to a best effort scenario.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.ExtractMethod.AbstractExtractMethodCommandHandler.ApplyChangesToBuffer(Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodResult,Microsoft.VisualStudio.Text.ITextBuffer,System.Threading.CancellationToken)">
            <summary>
            Applies an ExtractMethodResult to the editor.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.Formatting.Indentation.AbstractSmartTokenFormatterCommandHandler.FormatToken(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Formatting.Rules.IFormattingRule},System.Threading.CancellationToken)">
            <returns>True if any change is made.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.Formatting.Indentation.AbstractSmartTokenFormatterCommandHandler.ReadjustIndentation(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer,System.Int32,System.Int32)">
            <summary>
            re-adjust caret position to be the beginning of first text on the line. and make sure the text start at the given indentation
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.Formatting.Indentation.AbstractSmartTokenFormatterCommandHandler.CanHandleOurselves(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            check whether we can smart indent ourselves. we only attempt to smart indent ourselves
            if the line in subject buffer we do smart indenting maps back to the view as it is and
            if it starts from the beginning of the line
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.Formatting.Indentation.AbstractSmartTokenFormatterCommandHandler.EditorHandled(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            check whether editor smart indenter mechanism handled this case already
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.Formatting.Indentation.AbstractSmartTokenFormatterCommandHandler.TryFormatUsingTokenFormatter(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.CodeAnalysis.Document,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Formatting.Rules.IFormattingRule},System.Threading.CancellationToken)">
            <summary>
            check whether we can do automatic formatting using token formatter instead of smart indenter for the "enter" key
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.Formatting.Indentation.AbstractSmartTokenFormatterCommandHandler.CreateEditTransaction(Microsoft.VisualStudio.Text.Editor.ITextView,System.String)">
            <summary>
            create caret preserving edit transaction
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.Highlighting.HighlightingTagSource">
            <summary>
            A derivation of <see cref="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSources.ViewTagSource`1" /> that only recomputes highlighting if you moved out
            of the existing set of highlights.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractEditorInlineRenameService.SymbolInlineRenameInfo">
            <summary>
            Represents information about the ability to rename a particular location.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractEditorInlineRenameService.SymbolInlineRenameInfo._shortenedTriggerSpan">
            <summary>
            Whether or not we shortened the trigger span (say because we were renaming an attribute,
            and we didn't select the 'Attribute' portion of the name.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractEditorInlineRenameService.SymbolInlineRenameInfo.GetReferenceEditSpan(Microsoft.CodeAnalysis.Editor.InlineRenameLocation,System.Threading.CancellationToken)">
            <summary>
            Given a span of text, we need to return the subspan that is editable and
            contains the current replacementText.
            
            These cases are currently handled:
                - Escaped identifiers                          [foo] => foo
                - Type suffixes in VB                          foo$ => foo
                - Qualified names from complexification        A.foo => foo
                - Optional Attribute suffixes                  XAttribute => X
                    Careful here:                              XAttribute => XAttribute if renamesymbol is XAttributeAttribute
                - Compiler-generated EventHandler suffix       XEventHandler => X
                - Compiler-generated get_ and set_ prefixes    get_X => X
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractInlineRenameUndoManager`1">
            <summary>
            This class contains the logic common to VS and ETA when implementing IInlineRenameUndoManager
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.Dashboard.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.RenameShortcutKey.ExtractAccessKey(System.String,System.String)">
            <summary>
            Given a localized label, searches for _ and extracts the accelerator key. If none found,
            returns defaultValue.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameService.ActiveSessionChanged">
            <summary>
            Raised when the ActiveSession property has changed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.ReplacementText">
            <summary>
            If non-null, the current text of the replacement. Linked spans added will automatically be updated with this
            text.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession._allRenameLocationsTask">
            <summary>
            The task which computes the main rename locations against the original workspace
            snapshot.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession._cancellationTokenSource">
            <summary>
            The cancellation token for most work being done by the inline rename session. This
            includes the <see cref="F:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession._allRenameLocationsTask"/> tasks.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession._conflictResolutionTask">
            <summary>
            This task is a continuation of the allRenameLocationsTask that is the result of computing
            the resolutions of the rename spans for the current replacementText.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession._conflictResolutionTaskCancellationSource">
            <summary>
            The cancellation source for <see cref="F:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession._conflictResolutionTask"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.ApplyReplacementText(System.String,System.Boolean)">
            <summary>
            Updates the replacement text for the rename session and propagates it to all live buffers.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.OpenTextBufferManager">
            <summary>
            Manages state for open text buffers.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.OpenTextBufferManager._referenceSpanToLinkedRenameSpanMap">
            <summary>
            The list of active tracking spans that are updated with the session's replacement text.
            These are also the only spans the user can edit during an inline rename session.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.OpenTextBufferManager.HACK_GetTextChangesAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Temporary until we figure out why Document.GetTextChangesAsync(Document) sometimes hangs
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Controller.GetExternallyUsableCompletionItem(Microsoft.CodeAnalysis.Completion.CompletionItem)">
            <summary>
            The Model sometimes replaces CompletionItems with DescriptionModifyingCompletionItems.
            We need to ensure that all internal actions continue to use the 
            DescriptionModifyingCompletionItems and that external actions are given the original
            CompletionItems.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Controller.IsPotentionalFilterCharacter(Microsoft.CodeAnalysis.Editor.Commands.TypeCharCommandArgs)">
            <summary>
            A potential filter character is something that can filter a completion lists and is
            *guaranteed* to not be a commit character.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.DescriptionModifyingCompletionItem">
            <summary>
            DescriptionModifyingCompletionItems are used to lazily update other types of completion 
            items just before they are presented. They can alter the description if necessary, which
            we do when the insertion text of a VB completion item matches a known snippet shortcut. 
            In this case, we add an extra note to the description so users know how to expand the 
            snippet.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.PathCompletionUtilities.AfterLastSlashIndex(System.String,System.Int32)">
            <summary>
            Returns the index right after the last slash that precedes 'position'.  If there is no
            slash in the string, -1 is returned.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.ViewTextSpan">
            <summary>
            Helper class to use type-safety to enforce we're using TextSpans from the
            TextView's buffer.  Intellisense primarily uses spans from the SubjectBuffer
            which need to be mapped to ViewTextSpans before comparing to view positions
            such as the current caret location.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.ModelComputation`1._initialUnfilteredModel">
            <summary>
            Set when the first compute task completes
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.ElisionBufferDeferredContent">
            <summary>
            Creates quick info content out of the span of an existing snapshot.  The span will be
            used to create an elision buffer out that will then be displayed in the quick info
            window.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.AdornmentManager`1">
            <summary>
            UI manager for graphic overlay tags. These tags will simply paint something related to the text.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.AdornmentManager`1._textView">
            <summary>View that created us.</summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.AdornmentManager`1._adornmentLayer">
            <summary>Layer where we draw adornments.</summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.AdornmentManager`1._tagAggregator">
            <summary>Aggregator that tells us where to draw.</summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.AdornmentManager`1._asyncListener">
            <summary>Notification system about operations we do</summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.AdornmentManager`1._invalidatedSpans">
            <summary>Spans that are invalidated, and need to be removed from the layer..</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.AdornmentManager`1.OnLayoutChanged(System.Object,Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs)">
            <summary>
            This handler gets called whenever there is a visual change in the view.
            Example: edit or a scroll.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.AdornmentManager`1.OnTagsChanged(System.Object,Microsoft.VisualStudio.Text.Tagging.TagsChangedEventArgs)">
            <summary>
            This handler is called when tag aggregator notifies us about tag changes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.AdornmentManager`1.UpdateInvalidSpans">
            <summary>
            MUST BE CALLED ON UI THREAD!!!!   This method touches WPF.
             
            This function is used to update invalidates spans.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.AdornmentManager`1.UpdateSpans_CallOnlyOnUIThread(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.ITextSnapshot,System.Boolean)">
            <summary>
            MUST BE CALLED ON UI THREAD!!!!   This method touches WPF.
            
            This is where we apply visuals to the text. 
            
            It happens when another region of the view becomes visible or there is a change in tags.
            For us the end result is the same - get tags from tagger and update visuals correspondingly.
            </summary>        
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.GraphicsTag">
            <summary>
            This needs to be public for testing the AdornmentManager
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.GraphicsTag.GetGraphics(Microsoft.VisualStudio.Text.Editor.IWpfTextView,System.Windows.Media.Geometry)">
            <summary>
            This method allows corresponding adornment manager to ask for a graphical glyph.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.LineSeparatorAdornmentManagerProvider">
            <summary>
            This factory is called to create the view service that will manage line separators.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.LineSeparatorTag">
            <summary>
            Tag that specifies line separator.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.LineSeparatorTag.GetGraphics(Microsoft.VisualStudio.Text.Editor.IWpfTextView,System.Windows.Media.Geometry)">
            <summary>
            Creates a very long line at the bottom of bounds.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.LineSeparators.LineSeparatorTaggerProvider">
            <summary>
            This factory is called to create taggers that provide information about where line
            separators go.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.MetadataAsSource.MetadataAsSourceFileService._gate">
            <summary>
            A lock to guard parallel accesses to this type. In practice, we presume that it's not 
            an important scenario that we can be generating multiple documents in parallel, and so 
            we simply take this lock around all public entrypoints to enforce sequential access.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.MetadataAsSource.MetadataAsSourceFileService._keyToInformation">
            <summary>
            For a description of the key, see GetKeyAsync.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.MetadataAsSource.MetadataAsSourceFileService._mutex">
            <summary>
            We create a mutex so other processes can see if our directory is still alive. We destroy the mutex when
            we purge our generated files.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.MetadataAsSource.MetadataAsSourceFileService.UniqueDocumentKey._filePath">
            <summary>
            The path to the assembly. Null in the case of in-memory assemblies, where we then use assembly identity.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.MetadataAsSource.MetadataAsSourceFileService.UniqueDocumentKey._assemblyIdentity">
            <summary>
            Assembly identity. Only non-null if filePath is null, where it's an in-memory assembly.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.MetadataAsSource.MetadataAsSourceGeneratedFileInfo.GetProjectInfoAndDocumentId(Microsoft.CodeAnalysis.Workspace,System.Boolean)">
            <summary>
            Creates a ProjectInfo to represent the fake project created for metadata as source documents.
            </summary>
            <param name="workspace">The containing workspace.</param>
            <param name="loadFileFromDisk">Whether the source file already exists on disk and should be included. If
            this is a false, a document is still created, but it's not backed by the file system and thus we won't
            try to load it.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.NavigateTo.NavigateToItemProvider.Searcher.GetNavigateToLanguage(System.String)">
            <summary>
            Returns the name for the language used by the old Navigate To providers.
            </summary>
            <remarks> It turns out this string is used for sorting and for some SQM data, so it's best
            to keep it unchanged.</remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController">
            <summary>
            The controller for navigation bars.
            </summary>
            <remarks>
            The threading model for this class is simple: all non-static members are affinitized to the
            UI thread.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController._versionStampOfFullListPushedToPresenter">
            <summary>
            If we have pushed a full list to the presenter in response to a focus event, this
            contains the version stamp of the list that was pushed. It is null if the last thing
            pushed to the list was due to a caret move or file change.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController.PresenterAlreadyHaveUpToDateFullList(System.Threading.CancellationToken)">
            <summary>
            Check if the presenter has already been pushed the full model that corresponds to the
            current buffer's project version stamp.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController.ProcessItemSelectionSynchronously(Microsoft.CodeAnalysis.Editor.NavigationBarItem,System.Threading.CancellationToken)">
            <summary>
            Process the selection of an item synchronously inside a wait context.
            </summary>
            <param name="item">The selected item.</param>
            <param name="cancellationToken">A cancellation token from the wait context.</param>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController._modelTask">
            <summary>
            The computation of the last model.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController.StartModelUpdateAndSelectedItemUpdateTasks(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Starts a new task to compute the model based on the current text.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController.ComputeModelAsync(Microsoft.CodeAnalysis.Document,Microsoft.VisualStudio.Text.ITextSnapshot,System.Threading.CancellationToken)">
            <summary>
            Computes a model for the given snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController.StartSelectedItemUpdateTask(System.Int32,System.Boolean)">
            <summary>
            Starts a new task to compute what item should be selected.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarController.GetMatchingItem``1(System.Collections.Generic.IEnumerable{``0},Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.CodeAnalysis.Editor.INavigationBarItemService,System.Threading.CancellationToken)">
            <summary>
            Finds the item that point is in, or if it's not in any items, gets the first item that's
            positioned after the cursor.
            </summary>
            <returns>A tuple of the matching item, and if it should be shown grayed.</returns>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarModel.SemanticVersionStamp">
            <summary>
            The VersionStamp of the project when this model was computed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.NavigationBar.NavigationBarSymbolIdIndexProvider">
            <summary>
            A little helper to produce indexes when producing NavigationBarItems when we have multiple
            symbols with the same symbol ID.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.Notification.EditorNotificationServiceFactory.EditorDialogService.NotificationCallback">
            <summary>
            For testing purposes only.  If non-null, this callback will be invoked instead of showing a dialog.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.Outlining.OutliningSpan.TextSpan">
            <summary>
            The span of text to collapse.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.Outlining.OutliningSpan.HintSpan">
            <summary>
            The span of text to display in the hint on mouse hover.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.Outlining.OutliningSpan.BannerText">
            <summary>
            The text to display inside the collapsed region.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Implementation.Outlining.OutliningSpan.AutoCollapse">
            <summary>
            Whether or not this region should be automatically collapsed when the 'Collapse to Definitions' command is invoked.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.Outlining.OutliningTaggerProvider">
            <summary>
            Shared implementation of the outliner tagger provider.
            
            Note: the outliner tagger is a normal buffer tagger provider and not a view tagger provider.
            This is important for two reason.  The first is that if it were view based then we would lose
            the state of the collapsed/open regions when they scrolled in and out of view.  Also, if the
            editor doesn't know about all the regions in the file, then it wouldn't be able to to
            persist them to the SUO file to persist this data across sessions.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider">
            <summary>
            Also known as "rename smart tag," this watches text changes in open buffers, determines
            whether they can be interpreted as an identifier rename, and if so displays a smart tag 
            that can perform a rename on that symbol. Each text buffer is tracked independently.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.StateMachine">
            <summary>
            Keeps track of the rename tracking state for a given text buffer by tracking its
            changes over time.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.TrackingSession">
            <summary>
            Determines whether the original token was a renamable identifier on a background thread
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.UndoPrimitive">
            <summary>
            Clears the state machine on relevant undo/redo actions.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.FixAllSuggestedAction">
            <summary>
            Suggested action for fix all occurrences code fix.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.CodeFixSuggestedAction">
            <summary>
            Represents light bulb menu item for code fixes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.CodeFixSuggestedAction.GetFixAllSuggestedActionSet(Microsoft.CodeAnalysis.CodeActions.CodeAction,System.Int32,Microsoft.CodeAnalysis.CodeFixes.FixAllCodeActionContext,Microsoft.CodeAnalysis.Workspace,Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.CodeAnalysis.Editor.ICodeActionEditHandlerService)">
            <summary>
            If the provided fix all context is non-null and the context's code action Id matches the given code action's Id then,
            returns the set of fix all occurrences actions associated with the code action.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.CodeRefactoringSuggestedAction">
            <summary>
            Represents light bulb menu item for code refactorings.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction">
            <summary>
            Base class for all Roslyn light bulb menu items.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider.Source.OrganizeFixes(Microsoft.CodeAnalysis.Workspace,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CodeFixes.CodeFixCollection})">
            <summary>
            Arrange fixes into groups based on the issue (diagnostic being fixed) and prioritize these groups.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider.Source.GroupFixes(Microsoft.CodeAnalysis.Workspace,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CodeFixes.CodeFixCollection},System.Collections.Generic.IDictionary{Microsoft.CodeAnalysis.Diagnostic,System.Collections.Generic.IList{Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction}},System.Collections.Generic.IList{Microsoft.CodeAnalysis.Diagnostic})">
            <summary>
            Groups fixes by the diagnostic being addressed by each fix.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider.Source.PrioritizeFixGroups(System.Collections.Generic.IDictionary{Microsoft.CodeAnalysis.Diagnostic,System.Collections.Generic.IList{Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction}},System.Collections.Generic.IList{Microsoft.CodeAnalysis.Diagnostic})">
            <summary>
            Return prioritized set of fix groups such that fix group for suppression always show up at the bottom of the list.
            </summary>
            <remarks>
            Fix groups are returned in priority order determined based on <see cref="T:Microsoft.CodeAnalysis.ExtensionOrderAttribute"/>.
            Priority for all <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet"/>s containing fixes is set to <see cref="F:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority.Medium"/> by default.
            The only exception is the case where a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet"/> only contains suppression fixes -
            the priority of such <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet"/>s is set to <see cref="F:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority.None"/> so that suppression fixes
            always show up last after all other fixes (and refactorings) for the selected line of code.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider.Source.OrganizeRefactorings(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoring)">
            <summary>
            Arrange refactorings into groups.
            </summary>
            <remarks>
            Refactorings are returned in priority order determined based on <see cref="T:Microsoft.CodeAnalysis.ExtensionOrderAttribute"/>.
            Priority for all <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet"/>s containing refactorings is set to <see cref="F:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority.Low"/>
            and should show up after fixes but before suppression fixes in the light bulb menu.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithFlavors">
            <summary>
            Base class for light bulb menu items for code fixes and code refactorings.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuppressionSuggestedAction">
            <summary>
            Represents top-level light bulb menu item for the suppression fix.
            The top-level item itself does nothing. It doesn't display a preview and can't be invoked / applied.
            The top-level item is simply a container for the fixes displayed as sub-menu items.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.TextStructureNavigation.AbstractTextStructureNavigatorProvider.TextStructureNavigator.FindLeafNode(Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)">
            <summary>
            Finds deepest node that covers given <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.TextStructureNavigation.AbstractTextStructureNavigatorProvider.TextStructureNavigator.TryFindLeafToken(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.CodeAnalysis.SyntaxToken@,System.Threading.CancellationToken)">
            <summary>
            Given position in a text buffer returns the leaf syntax node it belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.TextStructureNavigation.AbstractTextStructureNavigatorProvider.TextStructureNavigator.SkipSameSpanParents(Microsoft.CodeAnalysis.SyntaxNodeOrToken)">
            <summary>
            Returns first ancestor of the node which has a span wider than node's span.
            If none exist, returns the last available ancestor.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Implementation.TextStructureNavigation.AbstractTextStructureNavigatorProvider.TextStructureNavigator.GetEnclosingNode(Microsoft.CodeAnalysis.SyntaxNodeOrToken)">
            <summary>
            Finds node enclosing current from navigation point of view (that is, some immediate ancestors
            may be skipped during this process).
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Implementation.TodoComments.TodoCommentTokens">
            <summary>
            provide comment tokens to scan
            
            we use this indirection so that we can get different tokens based on host
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IEditorClassificationService.AddLexicalClassifications(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.TextSpan,System.Collections.Generic.List{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Threading.CancellationToken)">
            <summary>
            Produce the classifications for the span of text specified.  Classification should be
            performed as quickly as possible, and should process the text in a lexical fashion.
            This allows classification results to be shown to the user when a file is opened before
            any additional compiler information is available for the text.
            
            Important: The classification should not consider the context the text exists in, and how
            that may affect the final classifications.  This may result in incorrect classification
            (i.e. indentifiers being classified as keywords).  These incorrect results will be patched
            up when the lexical results are superceded by the calls to AddSyntacticClassifications.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IEditorClassificationService.AddSyntacticClassificationsAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Collections.Generic.List{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Threading.CancellationToken)">
            <summary>
            Produce the classifications for the span of text specified.  The syntax of the document 
            can be accessed to provide more correct classifications.  For example, the syntax can
            be used to determine if a piece of text that looks like a keyword should actually be
            considered an identifier in its current context.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IEditorClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Collections.Generic.List{Microsoft.CodeAnalysis.Classification.ClassifiedSpan},System.Threading.CancellationToken)">
            <summary>
            Produce the classifications for the span of text specified.  Semantics of the language
            can be used to provide richer information for constructs where syntax is insufficient.
            For example, semantic information can be used to determine if an identifier should be
            classified as a type, structure, or something else entirely. 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IEditorClassificationService.AdjustStaleClassification(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Classification.ClassifiedSpan)">
            <summary>
            Adjust a classification from a previous version of text accordingly based on the current
            text.  For example, if a piece of text was classified as an identifier in a previous version,
            but a character was added that would make it into a keyword, then indicate that here.
            
            This allows the classified to quickly fix up old classifications as the user types.  These
            adjustments are allowed to be incorrect as they will be superceded by calls to get the
            syntactic and semantic classifications for this version later.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IFindReferencesService.FindReferencesAsync(Microsoft.CodeAnalysis.Document,System.Int32,Microsoft.CodeAnalysis.Editor.Host.IWaitContext)">
            <summary>
            Finds the references for the symbol at the specific position in the document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IFindReferencesService.TryFindReferences(Microsoft.CodeAnalysis.Document,System.Int32,Microsoft.CodeAnalysis.Editor.Host.IWaitContext)">
            <summary>
            Finds the references for the symbol at the specific position in the document and then 
            presents them.
            </summary>
            <returns>True if finding references of the symbol at the provided position succeeds.  False, otherwise.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IEditorFormattingService.SupportsFormattingOnTypedCharacter(Microsoft.CodeAnalysis.Document,System.Char)">
            <summary>
            True if this service would like to format the document based on the user typing the
            provided character.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IEditorFormattingService.GetFormattingChangesAsync(Microsoft.CodeAnalysis.Document,System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)">
            <summary>
            Returns the text changes necessary to format the document.  If "textSpan" is provided,
            only the text changes necessary to format that span are needed.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IEditorFormattingService.GetFormattingChangesOnPasteAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)">
            <summary>
            Returns the text changes necessary to format the document on paste operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IEditorFormattingService.GetFormattingChangesAsync(Microsoft.CodeAnalysis.Document,System.Char,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns the text changes necessary to format the document after the user enters a 
            character.  The position provided is the position of the caret in the document after
            the character been inserted into the document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IEditorFormattingService.GetFormattingChangesOnReturnAsync(Microsoft.CodeAnalysis.Document,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns the text changes necessary to format the document after the user enters a Return
            The position provided is the position of the caret in the document after Return.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IGoToDefinitionService.FindDefinitionsAsync(Microsoft.CodeAnalysis.Document,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the definitions for the symbol at the specific position in the document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IGoToDefinitionService.TryGoToDefinition(Microsoft.CodeAnalysis.Document,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Finds the definitions for the symbol at the specific position in the document and then 
            navigates to them.
            </summary>
            <returns>True if navigating to the definition of the symbol at the provided position succeeds.  False, otherwise.</returns>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameReplacementInfo.NewSolution">
            <summary>
            The solution obtained after resolving all conflicts.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameReplacementInfo.ReplacementTextValid">
            <summary>
            Whether or not the replacement text entered by the user is valid.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameReplacementInfo.DocumentIds">
            <summary>
            The documents that need to be updated.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameReplacementInfo.GetReplacements(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Returns all the replacements that need to be performed for the specified document.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameLocationSet.Locations">
            <summary>
            The set of locations that need to be updated with the replacement text that the user
            has entered in the inline rename session.  These are the locations are all relative
            to the solution when the inline rename session began.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameLocationSet.GetReplacementsAsync(System.String,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Returns the set of replacements and their possible resolutions if the user enters the
            provided replacement text and options.  Replacements are keyed by their document id
            and TextSpan in the original solution, and specify their new span and possible conflict
            resolution.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.CanRename">
            <summary>
            Whether or not the entity at the selected location can be renamed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.LocalizedErrorMessage">
            <summary>
            Provides the reason that can be displayed to the user if the entity at the selected 
            location cannot be renamed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.TriggerSpan">
            <summary>
            The span of the entity that is being renamed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.HasOverloads">
            <summary>
            Whether or not this entity has overloads that can also be renamed if the user wants.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.DisplayName">
            <summary>
            The short name of the symbol being renamed, for use in displaying information to the user.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.FullDisplayName">
            <summary>
            The full name of the symbol being renamed, for use in displaying information to the user.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.Glyph">
            <summary>
            The glyph for the symbol being renamed, for use in displaying information to the user.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.GetFinalSymbolName(System.String)">
            <summary>
            Gets the final name of the symbol if the user has typed the provided replacement text
            in the editor.  Normally, the final name will be same as the replacement text.  However,
            that may not always be the same.  For example, when renaming an attribute the replacement
            text may be "NewName" while the final symbol name might be "NewNameAttribute".
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.GetReferenceEditSpan(Microsoft.CodeAnalysis.Editor.InlineRenameLocation,System.Threading.CancellationToken)">
            <summary>
            Returns the actual span that should be edited in the buffer for a given rename reference
            location.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.GetConflictEditSpan(Microsoft.CodeAnalysis.Editor.InlineRenameLocation,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the actual span that should be edited in the buffer for a given rename conflict
            location.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.FindRenameLocationsAsync(Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)">
            <summary>
            Determine the set of locations to rename given the provided options. May be called 
            multiple times.  For example, this can be called one time for the initial set of
            locations to rename, as well as any time the rename options are changed by the user.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.TryOnBeforeGlobalSymbolRenamed(Microsoft.CodeAnalysis.Workspace,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},System.String)">
            <summary>
            Called before the rename is applied to the specified documents in the workspace.  Return 
            <code>true</code> if rename should proceed, or <code>false</code> if it should be canceled.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IInlineRenameInfo.TryOnAfterGlobalSymbolRenamed(Microsoft.CodeAnalysis.Workspace,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},System.String)">
            <summary>
            Called after the rename is applied to the specified documents in the workspace.  Return 
            <code>true</code> if this operation succeeded, or <code>false</code> if it failed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.IEditorInlineRenameService">
            <summary>
            Language service that allows a language to participate in the editor's inline rename feature.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.SolutionPreviewItem.#ctor(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.DocumentId,System.Lazy{System.Object})">
            <summary>
            Construct an instance of <see cref="T:Microsoft.CodeAnalysis.Editor.SolutionPreviewItem"/>
            </summary>
            <param name="projectId"><see cref="F:Microsoft.CodeAnalysis.Editor.SolutionPreviewItem.ProjectId"/> for the <see cref="T:Microsoft.CodeAnalysis.Project"/> that contains the content being visualized in the supplied <paramref name="preview"/></param>
            <param name="documentId"><see cref="F:Microsoft.CodeAnalysis.Editor.SolutionPreviewItem.DocumentId"/> for the <see cref="T:Microsoft.CodeAnalysis.Document"/> being visualized in the supplied <paramref name="preview"/></param>
            <param name="preview">Lazily instantiated preview content.</param>
            <remarks>Use lazy instantiation to ensure that any IWpfTextViews that may be present inside a given preview are only instantiated at the point
            when the VS lightbulb requests that preview. Otherwise, we could end up instantiating a bunch of IWpfTextViews most of which will never get
            passed to the VS lightbulb. Such zombie IWpfTextViews will never get closed and we will end up leaking memory.</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.SolutionPreviewResult.TakeNextPreview(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.ProjectId)">
             <remarks>
             Once a preview object is returned from this function, the ownership of this preview object is
             transferred to the caller. It is the caller's responsibility to ensure that the preview object
             will be properly disposed (i.e. that any contained IWpfTextViews will be properly closed).
            
             This function guarantees that it will not return the same preview object twice if called twice
             (thereby reducing the possibility that a given preview object can end up with more than one owner).
             </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.IndentationResult">
            <summary>
            An indentation result represents where the indent should be placed.  It conveys this through
            a pair of values.  A position in the existing document where the indent should be relative,
            and the number of columns after that that the indent should be placed at.  
            
            This pairing provides flexibility to the implementor to compute the indentation results in
            a variety of ways.  For example, one implementation may wish to express indentation of a 
            newline as being four columns past the start of the first token on a previous line.  Another
            may wish to simply express the indentation as an absolute amount from the start of the 
            current line.  With this tuple, both forms can be expressed, and the implementor does not
            have to convert from one to the other.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IndentationResult.BasePosition">
            <summary>
            The base position in the document that the indent should be relative to.  This position
            can occur on any line (including the current line, or a previous line).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.IndentationResult.Offset">
            <summary>
            The number of columns the indent should be at relative to the BasePosition's column.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.TodoCommentDescriptor">
            <summary>
            Description of a TODO comment type to find in a user's comments.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.TodoComment">
            <summary>
            A TODO comment that has been found within the user's code.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.IRefactorNotifyService">
            <summary>
            Allows editors to listen to refactoring events and take appropriate action. For example, 
            when VS knows about a symbol rename, it asks the Xaml language service to update xaml files
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IRefactorNotifyService.TryOnBeforeGlobalSymbolRenamed(Microsoft.CodeAnalysis.Workspace,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},Microsoft.CodeAnalysis.ISymbol,System.String,System.Boolean)">
            <summary>
            Notifies any interested parties that a rename action is about to happen. 
            Implementers can request the rename action be cancelled, in which case they should 
            return false or throw an exception, depending on the throwOnFailure argument. Callers 
            should honor cancellation requests by not applying the rename and not calling 
            <see cref="M:Microsoft.CodeAnalysis.Editor.IRefactorNotifyService.TryOnAfterGlobalSymbolRenamed(Microsoft.CodeAnalysis.Workspace,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},Microsoft.CodeAnalysis.ISymbol,System.String,System.Boolean)"/>.
            </summary>
            <returns>True if the rename should proceed.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.IRefactorNotifyService.TryOnAfterGlobalSymbolRenamed(Microsoft.CodeAnalysis.Workspace,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},Microsoft.CodeAnalysis.ISymbol,System.String,System.Boolean)">
            <summary>
            Notifies any interested parties that a symbol rename has been applied to the 
            workspace. This should only be called if <see cref="M:Microsoft.CodeAnalysis.Editor.IRefactorNotifyService.TryOnBeforeGlobalSymbolRenamed(Microsoft.CodeAnalysis.Workspace,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},Microsoft.CodeAnalysis.ISymbol,System.String,System.Boolean)"/> was
            called and returned true before the symbol rename was applied to the workspace. 
            In the event of a failure to rename, implementers should return false or throw an
            exception, depending on the throwOnFailure argument.
            </summary>
            <returns>True if the rename was successful.</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.IContentTypeExtensions.MatchesAny(Microsoft.VisualStudio.Utilities.IContentType,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Test whether an extension matches a content type.
            </summary>
            <param name="dataContentType">Content type (typically of a text buffer) against which to
            match an extension.</param>
            <param name="extensionContentTypes">Content types from extension metadata.</param>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Extensions.HostWorkspaceServicesExtensions.s_hostServicesToContentTypeMap">
            <summary>
            A cache of host services -> (language name -> content type name).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Extensions.IProjectionBufferFactoryServiceExtensions.RoslynPreviewContentTypeDefinition">
            <summary>
            Hack to get view taggers working on our preview surfaces.  We need to define
            both projection and text in order for this to work.  Talk to JasonMal for he is the only
            one who understands this.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextSnapshotExtensions.FormatAndApplyToBuffer(Microsoft.VisualStudio.Text.ITextSnapshot,System.Threading.CancellationToken)">
            <summary>
            format given snapshot and apply text changes to buffer
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextSnapshotExtensions.FormatAndApplyToBuffer(Microsoft.VisualStudio.Text.ITextSnapshot,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Formatting.Rules.IFormattingRule},System.Threading.CancellationToken)">
            <summary>
            format given snapshot and apply text changes to buffer
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextSnapshotExtensions.FormatAndApplyToBuffer(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)">
            <summary>
            format given snapshot and apply text changes to buffer
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextSnapshotExtensions.FormatAndApplyToBuffer(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.CodeAnalysis.Text.TextSpan,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Formatting.Rules.IFormattingRule},System.Threading.CancellationToken)">
            <summary>
            format given snapshot and apply text changes to buffer
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextViewExtensions.GetContentTypes(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Collects the content types in the view's buffer graph.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextViewExtensions.GetOrCreateAutoClosingProperty``2(``1,System.Func{``1,``0})">
            <summary>
            Gets or creates a view property that would go away when view gets closed
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextViewExtensions.GetOrCreateAutoClosingProperty``2(``1,System.Object,System.Func{``1,``0})">
            <summary>
            Gets or creates a view property that would go away when view gets closed
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextViewExtensions.GetOrCreateAutoClosingProperty``2(``1,System.Object,System.Func{``1,``0},``0@)">
            <summary>
            Gets or creates a view property that would go away when view gets closed
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextViewExtensions.GetOrCreatePerSubjectBufferProperty``2(``1,Microsoft.VisualStudio.Text.ITextBuffer,System.Object,System.Func{``1,Microsoft.VisualStudio.Text.ITextBuffer,``0})">
            <summary>
            Gets or creates a per subject buffer property.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.ITextViewExtensions.GetOrCreatePerSubjectBufferProperty``2(``1,Microsoft.VisualStudio.Text.ITextBuffer,System.Object,System.Func{``1,Microsoft.VisualStudio.Text.ITextBuffer,``0},``0@)">
            <summary>
            Gets or creates a per subject buffer property, returning true if it needed to create it.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Extensions.MefExtensions">
            <summary>
            Helper class to perform ContentType best-match against a set of extensions. This could
            become a public service.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.MefExtensions.SelectMatchingExtensions``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}},Microsoft.VisualStudio.Utilities.IContentType[])">
            <summary>
            Given a list of extensions that provide content types, filter the list and return that
            subset which matches the given content type
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.MefExtensions.SelectMatchingExtensions``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Utilities.IContentType})">
            <summary>
            Given a list of extensions that provide content types, filter the list and return that
            subset which matches any of the given content types.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Extensions.SpanExtensions">
            <summary>
            Extension methods for the editor Span struct
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.SpanExtensions.ToTextSpan(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Convert the editor Span instance to the corresponding TextSpan instance
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.IWorkspaceExtensions.ApplyDocumentChanges(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Document,System.Threading.CancellationToken)">
            <summary>
            Update the workspace so that the document with the Id of <paramref name="newDocument"/>
            has the text of newDocument.  If the document is open, then this method will determine a
            minimal set of changes to apply to the document.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.IWorkspaceExtensions.ApplyTextChanges(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChange},System.Threading.CancellationToken)">
            <summary>
            Update the solution so that the document with the Id has the text changes
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Extensions.IWorkspaceExtensions.ApplyTextChanges(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.TextChange,System.Threading.CancellationToken)">
            <summary>
            Update the solution so that the document with the Id has the text changes
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Options.EditorComponentOnOffOptions">
            <summary>
            options to indicate whether a certain component in Roslyn is enabled or not
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Options.FeatureOnOffOptions.RenameTracking">
            <summary>
            This option is currently usued by Roslyn, but we might want to implement it in the 
            future. Keeping the option while it's unimplemented allows all upgrade paths to 
            maintain any customized value for this setting, even through versions that have not
            implemented this feature yet.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Options.FeatureOnOffOptions.RefactoringVerification">
            <summary>
            This option is currently usued by Roslyn, but we might want to implement it in the 
            future. Keeping the option while it's unimplemented allows all upgrade paths to 
            maintain any customized value for this setting, even through versions that have not
            implemented this feature yet.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.AsynchronousTagger`1">
            <summary>
            Async thin tagger implementation.
            
            Actual tag information is stored in TagSource and shared between multiple taggers created for same views or buffers.
            
            It's responsibility is on interfaction between host and tagger. TagSource has responsibility on how to provide information for this tagger.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Tagging.AsynchronousTagger`1._batchChangeNotifier">
            <summary>
            The batch change notifier that we use to throttle update to the UI.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.AbstractWorkspaceTrackingTaggerEventSource">
            <summary>
            An abstract implementation of a tagger event source that takes a buffer and tracks
            the workspace that it's attached to.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSource`1">
            <summary>
            <para>this is a bare minimum base implementation of TagSource where you can provide your own implementation that
            doesn't rely on any other framework such as event source, event producer to participate in async tagger framework</para>
            </summary>
            <typeparam name="TTag">The type of tag.</typeparam>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSource`1.WorkQueue">
            <summary>
            The async worker we defer to handle foreground/background thread management for this
            tagger. Note: some operations we perform on this must be uncancellable.  Specifically,
            once we've updated our internal state we need to *ensure* that the UI eventually gets in
            sync with it. As such, we allow cancellation of our tasks *until* we update our state.
            From that point on, we must proceed and execute the tasks.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSource`1.Listener">
            <summary>
            async operation notifier
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSource`1._notificationService">
            <summary>
            foreground notification service
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSource`1.GetTagIntervalTreeForBuffer(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            implemented by derived types to return interval tree associated with the buffer
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSource`1.RecomputeTagsForeground">
            <summary>
            Implemented by derived types to start recalculate tags
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSource`1.RecalculateTagsOnChanged(Microsoft.CodeAnalysis.Editor.Tagging.TaggerEventArgs)">
            <summary>
            Called by derived types to enqueue tags re-calculation request
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSource`1.Difference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSource{`0}.IDiffSpanComparer{``0})">
            <summary>
            Return all the spans that appear in only one of "latestSpans" or "previousSpans".
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSource`1._taggers">
            <summary>How many taggers are currently using us.</summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.AbstractSingleDocumentTagProducer`1">
            <summary>
            A specialization of <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.ITagProducer`1" /> that only produces tags for single <see cref="T:Microsoft.CodeAnalysis.Document" /> at a time.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.AbstractAsynchronousTaggerProvider`2">
            <summary>
            Base type of all asynchronous tagger providers (<see cref="T:Microsoft.VisualStudio.Text.Tagging.ITaggerProvider"/> and <see cref="T:Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider"/>). 
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Shared.Tagging.AbstractAsynchronousTaggerProvider`2.TagSourceOptions">
            <summary>
            Feature on/off options.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.AbstractNavigatableReferenceHighlightingTag">
            <summary>
            The base type of any text marker tags that can be navigated with Ctrl+Shift+Up and Ctrl+Shift+Down.
            </summary>
            <remarks>
            Unless you are writing code relating to reference or keyword highlighting, you should not be using
            this type.</remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSources.BufferTagSource`1">
            <summary>
            A derivation of <see cref="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1"/> that tags a single subject buffer. It does not use a view.
            </summary>
            <typeparam name="TTag"></typeparam>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSources.ViewTagSource`1">
            <summary>
            A derivation of <see cref="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1"/> that tags a single subject buffer in a view, and maps
            the caret position to that subject buffer.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1">
            <summary>
            <para>The <see cref="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1"/> is the core part of our asynchronous tagging infrastructure. It's
            the coordinator between <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.ITagProducer`1"/>s, <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource"/>s, and
            <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1"/>s.</para>
            
            <para>The <see cref="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1"/> is the type that actually owns the list of cached tags. When an
            <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource"/> says tags need to be recomputed, the tag source starts the computation
            and calls the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.ITagProducer`1"/> to build the new list of tags. When that's done,
            the tags are stored in <see cref="F:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1._cachedTags"/>. The tagger, when asked for tags from the editor, then returns
            the tags that are stored in <see cref="F:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1._cachedTags"/></para>
            
            <para>There is a one-to-many relationship between <see cref="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1"/>s and <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1"/>s.
            Taggers that tag the buffer and don't care about a view (think classification) have one <see cref="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSources.BufferTagSource`1"/>
            per subject buffer, the lifetime management provided by <see cref="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.AbstractAsynchronousBufferTaggerProvider`1"/>.
            Taggers that tag the buffer and care about the view (think keyword highlighting) have a <see cref="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSources.ViewTagSource`1"/>
            per subject buffer/view pair, and the lifetime management for that is provided by a <see cref="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.AbstractAsynchronousViewTaggerProvider`1"/>.
            Special cases, like reference highlighting (which processes multiple subject buffers at once) have their own
            providers and tag source derivations.</para>
            </summary>
            <typeparam name="TTag">The type of tag.</typeparam>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1._cachedTagsGate">
            <summary>
            Synchronization object for assignments to the <see cref="F:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1._cachedTags"/> field. This is only used for
            changes; reads may be done without any locking since the data structure itself is
            immutable.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1._removeTagsThatIntersectEdits">
            <summary>
            True if edits should cause us to remove tags that intersect with edits.  Used to ensure
            that squiggles are removed when the user types over them.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1._spanTrackingMode">
            <summary>
            The tracking mode we want to use for the tracking spans we create.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1._bufferToRelatedTagSource">
            <summary>
            A function that is provided to the producer of this tag source. May be null. In some
            scenarios, such as restoring previous REPL history entries, we want to try to use the
            cached tags we've already computed for the buffer, but those live in a different tag
            source which we need some help to find.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1._accumulatedTextChanges">
            <summary>
            accumulated text changes since last tag calculation
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1._eventSource">
            <summary>
            Our tagger event source that lets us know when we should call into the tag producer for
            new tags.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1._previousCachedTags">
            <summary>
            During the time that we are paused from updating the UI, we will use these tags instead.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1.GetInitialSpansToTag">
            <summary>
            Implemented by derived types to return a list of initial snapshot spans to tag.
            </summary>
            <remarks>Called on the foreground thread.</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1.GetCaretPoint">
            <summary>
            Implemented by derived types to return The caret position.
            </summary>
            <remarks>Called on the foreground thread.</remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1.RecomputeTagsForeground">
            <summary>
            Called on the foreground thread.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Tagging.ProducerPopulatedTagSource`1.GetTagIntervalTreeForBuffer(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Returns the TagSpanIntervalTree containing the tags for the given buffer. If no tags
            exist for the buffer at all, null is returned.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.BatchChangeNotifier">
            <summary>
            Handles the job of batching up change notifications so that don't spam the editor with too
            many update requests at a time.  Updating the editor can even be paused and resumed at a
            later point if some feature doesn't want the editor changing while it performs some bit of
            work.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Tagging.BatchChangeNotifier.CoalesceDifferenceCount">
            <summary>
            If we get more than this many differences, then we just issue it as a single change
            notification.  The number has been completely made up without any data to support it.
            
            Internal for testing purposes.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Tagging.BatchChangeNotifier._listener">
            <summary>
            The worker we use to do work on the appropriate background or foreground thread.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Tagging.BatchChangeNotifier._lastReportTick">
            <summary>
            We keep track of the last time we reported a span, so that if things have been idle for
            a while, we don't unnecessarily delay the reporting, but if things are busy, we'll start
            to throttle the notifications.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Shared.Tagging.BatchChangeNotifier.IsPaused">
            <summary>
            True if we are currently suppressing UI updates.  While suppressed we still continue
            doing everything as normal, except we do not update the UI.  Then, when we are no longer
            suppressed we will issue all pending UI notifications to the editor.  During the time
            that we're suppressed we will respond to all GetTags requests with the tags we had
            before we were paused.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSpanIntervalTree`1">
            <summary>
            A tag span interval tree represents an ordered tree data structure to store tag spans in.  It
            allows you to efficiently find all tag spans that intersect a provided span.  Tag spans are
            tracked. That way you can query for intersecting/overlapping spans in a different snapshot
            than the one for the tag spans that were added.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Utilities.AutomaticCodeChangeMergePolicy">
            <summary>
            a merge policy that should be used for any automatic code changes that could happen in sequences so that
            all those steps are shown to users as one undo transaction rather than multiple ones
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject">
            <summary>
            Base class that allows some helpers for detecting whether we're on the main WPF foreground thread, or
            a background thread.  It also allows scheduling work to the foreground thread at below input priority.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject.IsInputPending">
            <summary>
            Returns true if any keyboard or mouse button input is pending on the message queue.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Shared.Utilities.HACK_TextUndoTransactionThatRollsBackProperly">
            <summary>
            An implementation of <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" /> that wraps another
            <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" />. Some undo implementations (notably the VS implementation)
            violate the specified contract for Cancel(), which states that cancelling an active transaction
            should undo the primitives that we already added. This works around that problem; calling Cancel()
            on this forwards the cancellation to the inner transaction, and if it failed to roll back we
            do it ourselves.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Shared.Utilities.LinkedEditsTracker._trackingSpans">
            <summary>
            The list of active tracking spans.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Utilities.ResettableDelay.#ctor(System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Create a ResettableDelay that will complete a task after a certain duration.  The delay
            can be reset at any point before it elapses in which case completion is postponed.  The
            delay can be reset multiple times.
            </summary>
            <param name="delayInMilliseconds">The time to delay before completing the task</param>
            <param name="foregroundTaskScheduler">Optional.  If used, the delay won't start until the supplied TaskScheduler schedules the delay to begin.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Threading.AsynchronousSerialWorkQueue.WaitForPendingBackgroundWork">
            <summary>
            Wait until all queued background tasks have been completed.  NOTE: This will NOT pump,
            and it won't wait for any timer foreground tasks to actually enqueue their respective
            background tasks - it just waits for the already enqueued background tasks to finish.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Shared.Threading.AsynchronousSerialWorkQueue.WaitUntilCompletion_ForTestingPurposesOnly">
            <summary>
            Wait until all tasks have been completed.  NOTE that this will do a pumping wait if
            called on the UI thread. Also, it isn't guaranteed to be stable in the case of tasks
            enqueuing other tasks in arbitrary orders, though it does support our common pattern of
            "timer task->background task->foreground task with results"
            
            Use this method very judiciously.  Most of the time, we should be able to just use 
            IAsynchronousOperationListener for tests.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource">
            <summary>
            The events that the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousTaggerProvider`1"/> listens to to know when 
            to request more tags.  For example, an <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource"/> may listen to text 
            buffer changes, and can tell the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousTaggerProvider`1"/> that it needs
            to recompute tags.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource.Connect">
            <summary>
            Let event source know that it should start sending out events.  Implementation can use
            that as a point to attach to events and perform other initialization. This will only be
            called once. 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource.Disconnect">
            <summary>
            Let event source know that it is no longer needed.  Implementations can use this as a
            point to detach from events and perform other cleanup.  This will only be called once.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource.Changed">
            <summary>
            An event has happened on the thing the tagger is attached to.  The tagger should
            recompute tags.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource.UIUpdatesPaused">
            <summary>
            The tagger should stop updating the UI with the tags it's produced.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource.UIUpdatesResumed">
            <summary>
            The tagger can start notifying the UI about its tags again.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.TaggerDelay">
            <summary>
            How quickly the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousTaggerProvider`1"/> should update tags after
            receiving an <see cref="E:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource.Changed"/> notification.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.TaggerDelay.NearImmediate">
            <summary>
            Indicates that the tagger should retag after a short, but imperceptible delay.  This is
            for features that want to appear instantaneous to the user, but which can wait a short
            while until a batch of changes has occurred before processing.  Specifically, if a user
            expects the tag immediately after typing a character or moving the caret, then this
            delay should be used.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.TaggerDelay.Short">
            <summary>
            Not as fast as NearImmediate.  A user typing quickly or navigating quickly should not
            trigger this.  However, any sort of pause will cause it to trigger
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.TaggerDelay.Medium">
            <summary>
            Not as fast as 'Short'. The user's pause should be more significant until the tag
            appears.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.Tagging.TaggerDelay.OnIdle">
            <summary>
            Indicates that the tagger should run when the user appears to be 
            idle.  
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.TaggerEventArgs">
            <summary>
            Information provided to the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousTaggerProvider`1"/> when 
            <see cref="E:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource.Changed"/> fires.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.TaggerEventArgs.Kind">
            <summary>
            The kind of this tagger event, likely a member of <see cref="T:Microsoft.CodeAnalysis.Editor.Shared.Tagging.PredefinedChangedEventKinds" />.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.TaggerEventArgs.Delay">
            <summary>
            They amount of time to wait before the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousTaggerProvider`1"/>
            checks for new tags and updates the user interface.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.TaggerEventArgs.#ctor(Microsoft.CodeAnalysis.Editor.Tagging.TaggerDelay)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.TaggerEventArgs"/>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.ITagProducer`1">
            <summary>
            Produces <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag"/>s for a given <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>s in a
            <see cref="T:Microsoft.CodeAnalysis.Document"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.ITagProducer`1.TagComparer">
            <summary>
            Comparer used to determine if two <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag"/>s are the same.  This is used by
            the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousTaggerProvider`1"/> to determine if a previous set of
            computed tags and a current set of computed tags should be considered the same or not.
            If they are the same, then the UI will not be updated.  If they are different then
            the UI will be updated for sets of tags that have been removed or added.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.ITagProducer`1.ProduceTagsAsync(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan},System.Nullable{Microsoft.VisualStudio.Text.SnapshotPoint},System.Threading.CancellationToken)">
            <summary>
            Produce tags for the given spans.
            </summary>
            <param name="snapshotSpans">A list of SnapshotSpans and their corresponding documents
            that tags should be computed for. It is guaranteed to contain at least one element. In
            some scenarios, snapshotSpans may contain spans for snapshots that correspond to
            different buffers entirely. It is guaranteed, however, that there were not be multiple
            spans from different snapshots from the same buffer.</param>
            <param name="caretPosition">The caret position, if a caret position exists in one of the
            buffers included in snapshotSpans.</param>
            <param name="cancellationToken"></param>
            <returns>A list of tag spans</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousTaggerProvider`1">
            <summary>
            Computes <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag"/>s for a text buffer in an asynchronous manner.  Computation of
            the tags is handled by a provided <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.IAsynchronousTaggerDataSource`1"/>.  The
            <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousTaggerProvider`1"/> handles the jobs of scheduling when to 
            compute tags, managing the collection of tags, and notifying the and keeping the user 
            interface up to date with the latest tags produced.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousTaggerProvider`1.#ctor(Microsoft.CodeAnalysis.Editor.Tagging.IAsynchronousTaggerDataSource{`0})">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousTaggerProvider`1"/> using the provided 
            <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.IAsynchronousTaggerDataSource`1"/> to determine when to compute tags 
            and to produce tags when appropriate.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Tagging.IAsynchronousTaggerDataSource`1">
            <summary>
            Data source for the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousTaggerProvider`1"/>.  This type tells the
            <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousTaggerProvider`1"/> when tags need to be recomputed, as well
            as producing the tags when requested.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.IAsynchronousTaggerDataSource`1.RemoveTagsThatIntersectEdits">
            <summary>
            Whether or not the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousTaggerProvider`1"/> should remove a tag
            from the user interface if the user makes an edit that intersects with the span of the
            tag.  Removing may be appropriate if it is undesirable for stale tag data to be 
            presented to the user.  However, removal may also lead to a more noticible tagging 
            experience for the user if tags quickly get removed and re-added.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.Tagging.IAsynchronousTaggerDataSource`1.SpanTrackingMode">
            <summary>
            The behavior of tags that are created by the async tagger.  This will matter for tags
            created for a previous version of a document that are mapped forward by the async
            tagging architecture.  This value cannot be <see cref="F:Microsoft.VisualStudio.Text.SpanTrackingMode.Custom"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.IAsynchronousTaggerDataSource`1.CreateEventSource(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.ITaggerEventSource"/> that notifies the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousTaggerProvider`1"/>
            that it should recompute tags for the text buffer after an appropriate <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.TaggerDelay"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Tagging.IAsynchronousTaggerDataSource`1.CreateTagProducer">
            <summary>
            Creates the <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.ITagProducer`1"/> which will be used by the 
            <see cref="T:Microsoft.CodeAnalysis.Editor.Tagging.AsynchronousTaggerProvider`1"/> to produce tags asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.SymbolMapping.ISymbolMappingService.MapSymbolAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SymbolKey,System.Threading.CancellationToken)">
            <summary>
            Given a <cref see="SymbolId"/> and the document whence the corresponding <cref see="ISymbol"/>
            came, locate an identical symbol in the correct solution for performing common symbol operations
            (e.g. find references) as defined by this service.
            </summary>
            <param name="document">The document whence the symbol came</param>
            <param name="symbolId">The id of the symbol to map</param>
            <param name="cancellationToken">To cancel symbol resolution</param>
            <returns>The matching symbol from the correct solution or null</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.SymbolMapping.ISymbolMappingService.MapSymbolAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Given an <cref see="ISymbol"/> and the document whence the corresponding <cref see="ISymbol"/>
            came, locate an identical symbol in the correct solution for performing common symbol operations
            (e.g. find references) as defined by this service.
            </summary>
            <param name="document">The document whence the symbol came</param>
            <param name="symbol">The symbol to map</param>
            <param name="cancellationToken">To cancel symbol resolution</param>
            <returns>The matching symbol from the correct solution or null</returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Undo.Extensions.OpenGlobalUndoTransaction(Microsoft.CodeAnalysis.Workspace,System.String,System.Boolean)">
            <summary>
            Create a global undo transaction for the given workspace. if the host doesn't support undo transaction,
            useFallback flag can be used to indicate whether it should fallback to base implementation or not.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Undo.IGlobalUndoService">
            <summary>
            This provides a way to do global undo. but semantic of the global undo is defined by the workspace host.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Undo.IGlobalUndoService.IsGlobalTransactionOpen(Microsoft.CodeAnalysis.Workspace)">
            <summary>
            Queries whether a global transaction is currently active.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Undo.IGlobalUndoService.CanUndo(Microsoft.CodeAnalysis.Workspace)">
            <summary>
            query method that can answer whether global undo is supported by the workspace
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Undo.IGlobalUndoService.OpenGlobalUndoTransaction(Microsoft.CodeAnalysis.Workspace,System.String)">
            <summary>
            open global undo transaction for the workspace
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Undo.IWorkspaceGlobalUndoTransaction">
            <summary>
            This represents workspace global undo transaction
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Undo.IWorkspaceGlobalUndoTransaction.AddDocument(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            explicitly add a document to the global undo transaction
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.Undo.IWorkspaceGlobalUndoTransaction.Commit">
            <summary>
            finish the undo transaction
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Undo.NoOpGlobalUndoServiceFactory">
            <summary>
            This factory will create a service that provides workspace global undo service.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.Undo.NoOpGlobalUndoServiceFactory.NoOpUndoTransaction">
            <summary>
            null object that doesn't do anything
            </summary>
        </member>
    </members>
</doc>
